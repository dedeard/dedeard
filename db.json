{
  "navigation": {
    "home": "HOME",
    "about": "ABOUT",
    "blog": "BLOG",
    "portfolio": "PORTFOLIO",
    "contact": "CONTACT",
    "dark_mode": "DARK MODE",
    "light_mode": "LIGHT MODE"
  },
  "home": {
    "title": "DEDEARD | WEB DEVELOPER",
    "app_name": "DEDEARD",
    "app_title": "Web developer based in Makassar, Indonesia.",
    "bg_url": "https://i.ibb.co/c8RLgXS/main.jpg",
    "socials": [
      {
        "label": "INSTAGRAM",
        "url": "https://www.instagram.com/dedeard.js/"
      },
      {
        "label": "GITHUB",
        "url": "https://github.com/dedeardiansya"
      },
      {
        "label": "WHATSAPP",
        "url": "https://api.whatsapp.com/send?phone=6281343912883&text=%3CChatMe%20%2F%3E"
      }
    ]
  },
  "about": {
    "label": "About.",
    "title": "ABOUT | WEB DEVELOPER",
    "heading": "Iâ€™m Dede Ardiansya",
    "body": "<p>Web developer based in Makassar, Indonesia.</p><p>Building websites is my hobby, I try to have a minimalist website design.</p>",
    "img_url": "https://i.ibb.co/3vzGh4G/dede.jpg",
    "id": {
      "heading": "Saya Dede Ardiansya",
      "body": "<p>Pengembang web yang berbasis di Makassar, Indonesia.</p><p>Membangun website adalah hobi saya, saya mencoba memiliki desain website yang minimalis.</p>"
    }
  },
  "portfolio": {
    "label": "Portfolio.",
    "title": "PORTFOLIO | WEB DEVELOPER",
    "items": [
      {
        "type": "Laravel",
        "text": "Disposisi surat",
        "url": "https://github.com/dedeardiansya/deposisi-surat",
        "img": "https://i.ibb.co/G23WQVq/Untitled-1.jpg"
      },
      {
        "type": "Laravel | Nuxt.js",
        "text": "Ajarbelajar",
        "url": "https://ab.dedeard.my.id/",
        "img": "https://i.ibb.co/DVj3dyV/ajarbelajar.jpg"
      },
      {
        "type": "Vue",
        "text": "Web Portfolio",
        "url": "https://demodedeard.web.app/",
        "img": "https://i.ibb.co/kKZRB9g/dedeard.jpg"
      }
    ]
  },
  "contact": {
    "label": "Contact.",
    "title": "CONTACT | WEB DEVELOPER",
    "info": [
      {
        "label": "ADDRESS STREET",
        "items": [
          "D/23 Perumahan Puri diva Istanbul.",
          "Gowa, Sulawesi Selatan."
        ]
      },
      {
        "label": "MOBILE PHONE",
        "items": [
          "Call: +62 813-4391-2883",
          "WhatsApp: +62 813-4391-2883"
        ]
      },
      {
        "label": "ADDRESS EMAIL",
        "items": [
          "me@dedeard.my.id"
        ]
      }
    ],
    "form_url": "https://formspree.io/f/xoqyaqqe"
  },
  "blog": {
    "label": "Blog.",
    "title": "BLOG | WEB DEVELOPER",
    "items": [
      {
        "title": "Deploy aplikasi Next.js kamu ke Forge.",
        "slug": "deploy-aplikasi-nextjs-kamu-ke-forge",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/zJ8yJ6nFN2qsDhxvN0MeX7VBicXEvfzSldZ9Dkqg.png",
        "category": "Forge",
        "created_at": "2021-06-24",
        "body": "<p>Next.js adalah kerangka kerja React yang dikembangkan oleh Vercel. Ini mencakup fungsionalitas seperti rendering sisi server dan pembuatan situs statis. Hari ini kami akan menjelaskan bagaimana Anda dapat menerapkan aplikasi Next.js Anda dengan Laravel Forge.</p><p>Jika Anda mengikuti server Forge Anda sendiri, pastikan server tersebut adalah server &quot;Aplikasi&quot; atau &quot;Web&quot; sehingga Nginx diinstal.</p><p>Dalam postingan ini, kami akan menjelaskan cara men-deploy situs Anda menggunakan fitur rendering sisi server Next.js.</p><h2>Membuat Template Nginx</h2><p>Untuk menggunakan rendering sisi server, pertama-tama kita perlu membuat&nbsp;<a href=\"https://forge.laravel.com/docs/1.0/servers/nginx-templates.html\">Template Nginx</a> baru&nbsp;di Forge.&nbsp;Kami menggunakan Template Nginx di sini sehingga kami tidak perlu mengubah konfigurasi Nginx situs kami nanti.</p><p>Kami akan membuat template baru dengan nama &quot;Next.js App&quot; dan kemudian memperbarui konten template kami:</p><pre><code># FORGE CONFIG (DO NOT REMOVE!)\ninclude forge-conf/{{ SITE }}/before/*;\n\nserver {\n    listen {{ PORT }};\n    listen {{ PORT_V6 }};\n    server_name {{ DOMAINS }};\n    server_tokens off;\n    root {{ PATH }};\n\n    # FORGE SSL (DO NOT REMOVE!)\n    # ssl_certificate;\n    # ssl_certificate_key;\n\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n\n    index index.html index.htm;\n\n    charset utf-8;\n\n    # FORGE CONFIG (DO NOT REMOVE!)\n    include forge-conf/{{ SITE }}/server/*;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/{{ SITE }}-error.log error;\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n\n# FORGE CONFIG (DO NOT REMOVE!)\ninclude forge-conf/{{ SITE }}/after/*;\n</code></pre><p>Anda mungkin memperhatikan bahwa&nbsp;<code>location /</code>blok tersebut menggunakan&nbsp;<code>proxy_pass</code>.&nbsp;Render sisi server di Berikutnya bekerja mirip dengan PHP, server membuat proses tetap berjalan yang menghasilkan konten dan menyajikannya ke klien.&nbsp;Dengan Next.js, kami menggunakan Node, jadi kami akan meneruskan permintaan kami ke server Next.js melalui port&nbsp;<code>3000</code>.&nbsp;Anda dapat mengubah ini berdasarkan persyaratan proyek Anda.</p><h2>Membuat Situs</h2><p>Dengan Template Nginx yang dibuat, sekarang kita dapat membuat situs kita, memastikan bahwa kita memilih opsi Template Nginx &quot;Next.js App&quot;:</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/tifX6Qp2JU3dW6f5AYzYqUHemwNYwaAEPG894Pya.png\" alt=\"Membuat situs baru\" class=\"fr-fic fr-dii\"></p><p>Setelah Forge membuat situs, kami dapat menginstal repositori kami dari penyedia Git pilihan kami.</p><h2>Skrip Penerapan</h2><p>Langkah selanjutnya adalah memperbarui skrip penerapan situs:</p><pre><code>cd /home/forge/next-app-static.curved-feather.test\ngit pull origin $FORGE_SITE_BRANCH\n\nnpm install\n</code></pre><p>Kami sekarang dapat menyebarkan situs kami dengan skrip yang diperbarui untuk menginstal dependensi NPM kami.</p><p>Jika kita menjelajah ke situs kita sekarang, Nginx akan memberi kita kesalahan 502.&nbsp;Ini karena kita belum memulai server Next.js.&nbsp;Untuk melakukannya, kita akan membuat Daemon baru di server.&nbsp;Untuk daemon, kita hanya perlu menyediakan direktori situs kita dan perintah;&nbsp;<code>npm run generate</code>.</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/ICmgY8IM74BmLj52RKHx0U0BIyCH5DLtr4UldXiW.png\" alt=\"Membuat Daemon\" class=\"fr-fic fr-dii\"></p><p>Setelah Daemon dikonfigurasi dan menjadi aktif, kita dapat mengunjungi situs kita dan melihat bahwa itu sekarang berfungsi.</p>"
      },
      {
        "title": "Vapor: Gerbang API vs Penyeimbang Beban",
        "slug": "vapor-api-gateway-vs-load-balancers",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/DsHqFQrZ2iy56I62JT2x0eLLc6rNZQl2MMEnRAaY.png",
        "category": "Vapor",
        "created_at": "2021-06-16",
        "body": "<p>Di server tradisional, Anda biasanya menggunakan server web seperti NGINX atau Apache untuk merutekan lalu lintas HTTP ke aplikasi Laravel Anda. Namun, saat menggunakan infrastruktur tanpa server AWS yang didukung oleh Vapor, Anda memiliki tiga opsi berbeda untuk dipertimbangkan saat menentukan cara merutekan lalu lintas ke aplikasi Anda: API Gateway v1, API Gateway v2, dan Load Balancer.</p><p>Pada artikel ini, kita akan membandingkan ketiga opsi ini dalam hal kinerja, harga, dan fitur.</p><h2>Gerbang API v1</h2><p>Secara default, Vapor merutekan lalu lintas HTTP ke aplikasi tanpa server Anda menggunakan API Gateway v1. Jika <code>vapor.yml</code>file aplikasi Anda tidak berisi opsi konfigurasi <code>gateway-version</code>atau <code>balancer</code>, Anda sudah menggunakan API Gateway v1.</p><p>API Gateway v1 adalah satu-satunya opsi <strong>edge-optimized yang</strong> ditawarkan Vapor. Titik akhir API yang dioptimalkan tepi adalah <strong>opsi terbaik untuk klien yang terdistribusi secara geografis</strong> , karena permintaan HTTP dirutekan ke Titik Kehadiran CloudFront terdekat.</p><p>API Gateway v1 mengikuti model penetapan harga <strong>bayar sesuai penggunaan</strong> , membebankan <strong>$3,50 / juta permintaan</strong> . Ini adalah opsi perutean lalu lintas paling mahal (dalam skala) di antara tiga opsi yang ditawarkan oleh Vapor.</p><p>Untuk memastikan Anda menggunakan API Gateway v1 di lingkungan Vapor Anda, Anda cukup menghilangkan opsi <code>gateway-version</code>and <code>balancer</code>, atau menentukan <code>gateway-version: 1</code>secara eksplisit dalam <code>vapor.yml</code>file&nbsp;aplikasi Anda&nbsp;:</p><pre><code>id: 2\nname: your-project\nenvironments:\n    production:\n        gateway-version: 1\n</code></pre><h2>Gerbang API v2</h2><p>API Gateway v2 adalah alternatif yang <strong>lebih murah dan lebih cepat</strong> untuk API Gateway v1, menyediakan <strong>overhead koneksi</strong> hingga <strong>60% lebih sedikit</strong> .</p><p>Namun, opsi ini adalah titik akhir API <strong>regional</strong> . Ini berarti bahwa pelanggan di dekat wilayah proyek Anda dapat mengharapkan peningkatan kecepatan, sementara pelanggan yang jauh dari wilayah proyek Anda mungkin tidak mendapatkan manfaat yang sama.</p><p>Salah satu batasan API Gateway v2 adalah <strong>tidak mendukung Firewall yang dikelola Vapor</strong> - fitur yang memberikan perlindungan dasar terhadap serangan penolakan layanan dan lalu lintas bot yang meluas yang dapat menghabiskan sumber daya lingkungan Anda. Selain itu, Anda harus menangani sendiri pengalihan HTTP ke HTTPS saat menggunakan API Gateway v2.</p><p>Sebagai solusi untuk batasan ini, saat ini kami menyarankan untuk menggunakan <a href=\"https://www.cloudflare.com/\">Cloudflare</a> sebagai penyedia DNS eksternal untuk aplikasi Vapor Anda menggunakan API Gateway v2, karena Anda dapat menggunakan solusi pengalihan Firewall dan HTTP ke HTTPS dari Cloudflare.</p><p>API Gateway v2 juga mengikuti model penetapan harga <strong>bayar sesuai</strong> pemakaian, membebankan <strong>$1,00 / juta permintaan</strong> . Sebagian besar pelanggan dapat mengharapkan <strong>penghematan</strong> biaya rata-rata <strong>hingga 70%</strong> dibandingkan dengan API Gateway v1.</p><p>Jika Anda ingin menggunakan API Gateway v2, Anda dapat menentukan <code>gateway-version: 2</code>opsi konfigurasi untuk lingkungan tertentu dalam <code>vapor.yml</code>file&nbsp;aplikasi Anda&nbsp;:</p><pre><code>id: 2\nname: your-project\nenvironments:\n    production:\n        gateway-version: 2\n</code></pre><h2>Penyeimbang Beban</h2><p>Sama seperti API gateway v2, application load balancer (ALB) adalah opsi <strong>regional</strong> . Namun, tidak seperti API Gateway v2, load balancer mendukung Firewall yang dikelola Vapor dan pengalihan HTTP ke HTTPS.</p><p>Namun, saat menggunakan penyeimbang beban untuk melayani lalu lintas ke aplikasi Anda, Anda harus memperhatikan batasan ukuran permintaan/respons Amazon.&nbsp;Load balancer dapat menerima/mengirim konten maksimal 1MB, sedangkan API Gateway v1/v2 dapat mendukung permintaan/respons hingga 6MB.</p><p>Berbeda dengan dua opsi sebelumnya, penyeimbang beban menggunakan model penetapan harga <strong>tetap</strong> , yang memberikan penghematan biaya besar dalam skala besar. Misalnya, jika aplikasi menerima 1 miliar permintaan per bulan, penyeimbang beban akan menghemat sekitar $4.000 untuk tagihan AWS bulanan aplikasi.</p><p>Untuk aplikasi yang menerima banyak lalu lintas, menggunakan penyeimbang beban lebih <strong>hemat biaya</strong> daripada opsi lain yang ditawarkan oleh Vapor dan AWS. Jika tidak, sebagian besar aplikasi harus menggunakan API Gateway v1 / v2.</p><p>Anda dapat membuat penyeimbang beban menggunakan UI Vapor atau menggunakan perintah CLI penyeimbang:</p><pre><code>vapor balancer my-balancer\n</code></pre><p>Untuk melampirkan penyeimbang beban ke lingkungan, tambahkan <code>balancer</code>entri ke konfigurasi lingkungan di <code>vapor.yml</code>file&nbsp;Anda&nbsp;dan terapkan aplikasi Anda:</p><pre><code>id: 2\nname: your-project\nenvironments:\n    production:\n        balancer: your-load-balancer\n</code></pre><h2>Kesimpulan</h2><p>Di Laravel, kami berkomitmen untuk memberi Anda pengalaman tanpa server yang paling tangguh dan ramah pengembang di dunia.&nbsp;Dalam artikel ini, Anda dapat melihat betapa mudahnya memilih dan mengelola cara yang Anda inginkan agar AWS menangani lalu lintas HTTP ke aplikasi Laravel Anda yang diberdayakan oleh Vapor.&nbsp;Cobalah opsi ini dan beri tahu kami kelanjutannya!</p><p>Kami harap Anda menikmati artikel ini. Jika Anda belum memeriksa Vapor, sekarang adalah waktu yang tepat untuk memulai! Anda dapat membuat akun hari ini di: <a href=\"https://vapor.laravel.com/\">vapor.laravel.com</a> .</p>"
      },
      {
        "title": "Vapor: Redis 6.x Cluster Sekarang Tersedia",
        "slug": "vapor-redis-6x-cluster-sekarang-tersedia",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/pBgZmYBs1XRDVDMptC2A2MUK9eXGSlvljrso5gTv.png",
        "category": "Vapor",
        "created_at": "2021-05-04",
        "body": "<p id=\"isPasted\">Vapor memungkinkan Anda dengan mudah membuat dan mengelola Redis Cache Cluster yang dapat diskalakan langsung dari UI Vapor atau menggunakan CLI Vapor.&nbsp;Mulai hari ini, selain Redis 5.x Cluster,&nbsp;<strong>kini Anda juga dapat membuat dan mengelola Redis 6.x Cluster</strong> .</p><p>Redis 6.x adalah versi terbaru dari&nbsp;perangkat lunak&nbsp;sumber terbuka&nbsp;<a href=\"https://redis.io/\">Redis</a> .&nbsp;Versi baru ini menghadirkan peningkatan keamanan dan meningkatkan kinerja cache Anda.</p><p>Anda dapat mulai menggunakan Redis 6.x Clusters dengan membuat cache baru di Vapor UI atau menggunakan&nbsp;<code>cache</code>perintah CLI.&nbsp;Kedua cara akan meminta Anda untuk detail lebih lanjut tentang cache seperti versi Redis:</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/pBgZmYBs1XRDVDMptC2A2MUK9eXGSlvljrso5gTv.png\" alt=\"gambar\" class=\"fr-fic fr-dii\"></p><p>Silakan lihat&nbsp;<a href=\"https://aws.amazon.com/blogs/aws/new-redis-6-compatibility-for-amazon-elasticache/\">pengumuman blog AWS</a> untuk informasi lebih lanjut tentang fitur baru ini.</p><p>Kami harap Anda menikmati tambahan baru untuk Laravel Vapor ini.&nbsp;Di Laravel, kami berkomitmen untuk memberi Anda pengalaman PHP yang paling kuat dan ramah pengembang di dunia.&nbsp;Jika Anda belum memeriksa Vapor, sekarang adalah waktu yang tepat untuk memulai!&nbsp;Anda dapat membuat akun hari ini di:&nbsp;<strong><a href=\"https://vapor.laravel.com/\">vapor.laravel.com</a></strong> .</p>"
      },
      {
        "title": "Forge: Octane Support",
        "slug": "forge-octane-support",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/387iQVEFLGWQ8GGBk30sCKZpVY4IyVZiYTZhISkU.jpeg",
        "category": "Forge",
        "created_at": "2021-04-21",
        "body": "<p>Kembali pada bulan Maret, Taylor mengumumkan proyek <a href=\"https://github.com/laravel/octane\">Laravel Octane</a> baru di Laracon Online.&nbsp;Sejak itu, kami sibuk mengerjakan perbaikan bug dan peningkatan pada Octane, serta menambahkan dukungan ke&nbsp;<a href=\"https://forge.laravel.com/\">Laravel Forge</a> .</p><p><img alt=\"\" src=\"https://laravel-blog-assets.s3.amazonaws.com/NmYMPJw14ZDIXLIqJeE9LUifABZ89AEMP5brhMwb.png\" class=\"fr-fic fr-dii\"></p><p>Hari ini kami dengan senang hati mengumumkan bahwa dukungan Octane tersedia di Forge.&nbsp;Kami telah menulis panduan di bawah ini untuk membantu Anda memulai.&nbsp;Harap diingat bahwa Octane masih dalam versi beta dan tidak boleh digunakan dalam produksi.</p><h2>Prasyarat</h2><p>Proyek Anda harus membutuhkan&nbsp;<code>&quot;laravel/octane&quot;: &quot;^0.3.2&quot;</code>atau lebih tinggi.&nbsp;Server Anda&nbsp;<strong>harus</strong> menginstal PHP 8.0.</p><p>Anda kemudian harus mengikuti instruksi instalasi Octane yang terdaftar di&nbsp;<a href=\"https://github.com/laravel/octane#installation\">repositori Octane</a> .</p><h2>Membuat Situs Oktan</h2><p>Octane dapat diaktifkan dengan memilih&nbsp;opsi jenis proyek&nbsp;<strong>Laravel Octane (Beta)</strong> dan PHP 8.0 sebagai versi PHP yang harus digunakan untuk melayani situs Anda:</p><p><img alt=\"Jenis Proyek Laravel Octane\" src=\"https://laravel-blog-assets.s3.amazonaws.com/b2Qk8heidCP5AzCNlaFIdf7JDJBtcxRP80kEiOSY.png\" class=\"fr-fic fr-dii\"></p><p>Jenis Proyek Laravel Octane</p><p>Setelah jenis proyek dipilih, Forge akan meminta port yang harus didengarkan oleh Octane.</p><p>Tidak seperti jenis proyek lainnya, Octane tidak akan menggunakan PHP-FPM untuk melayani situs Anda.&nbsp;Sebagai gantinya, Octane memulai server RoadRunner atau Swoole-nya sendiri (pilihan Anda) dan menggunakan Nginx sebagai proxy terbalik ke port yang Anda pilih.&nbsp;Sebaiknya pilih nomor port yang tinggi&nbsp;<code>8000</code>untuk mencegah bentrokan dengan perangkat lunak lain yang mungkin berjalan di server Anda.</p><p>Saat membuat situs Anda, Forge akan menginstal ekstensi Swoole jika belum diinstal di server Anda.&nbsp;Semua server baru yang disediakan dengan PHP 8.0 akan secara otomatis menerima ekstensi ini.</p><h2>Mengonfigurasi Daemon Oktan</h2><p>Setelah situs bertenaga Octane Anda dibuat di Forge, Anda akan melihat dua perbedaan penting dibandingkan dengan proyek FPM standar:</p><ol><li>Deploy Script tidak memuat ulang PHP-FPM, melainkan akan memeriksa status server Octane dan mengeluarkan perintah reload ke server Octane.</li><li>Ada&nbsp;panel&nbsp;<strong>Laravel Octane (Beta) baru</strong> yang menampilkan informasi yang Anda perlukan untuk mengonfigurasi daemon dengan benar.</li></ol><p><img alt=\"Forge akan menampilkan informasi yang diperlukan untuk membuat Daemon baru Anda.\" src=\"https://laravel-blog-assets.s3.amazonaws.com/55yqMNcF4ll3xMi099KwXSaW0hnJPqhibwCKM9Gu.png\" class=\"fr-fic fr-dii\"></p><p>Forge akan menampilkan informasi yang diperlukan untuk membuat Daemon baru Anda.</p><p>Anda harus menggunakan informasi ini untuk membuat Daemon yang akan mengelola server Octane Anda.&nbsp;Karena server Octane adalah proses yang berjalan lama, Daemon akan memantau proses dan secara otomatis memulai ulang Octane jika crash:</p><p><img alt=\"Membuat Daemon baru untuk menjalankan Octane.\" src=\"https://laravel-blog-assets.s3.amazonaws.com/pORInQL0ykdW0vc2A9U2tjYUruZjbkkq94zLAzjX.png\" class=\"fr-fic fr-dii\"></p><p>Membuat Daemon baru untuk menjalankan Octane.</p><p>Mari kita cepat memecah perintah yang telah dibuat Forge untuk kita:</p><pre>php8.0 artisan oktan: mulai  --port=8000 --tidak ada interaksi</pre><ul><li>Kami memastikan bahwa&nbsp;<code>octane:start</code>berjalan dengan biner PHP 8.0.</li><li>Kami memberi tahu Octane untuk mendengarkan di port&nbsp;<code>8000</code>.</li><li>Kami menjalankan perintah dengan&nbsp;<code>--no-interaction</code>opsi sehingga Octane akan menginstal dependensi apa pun untuk kami seperti&nbsp;<code>rr</code>(biner RoadRunner) jika perlu.</li></ul><p>Setelah Daemon Anda dibuat, situs Octane Anda sekarang seharusnya dapat diakses melalui browser web Anda!</p><p>Jika Anda tidak memiliki &nbsp; akun&nbsp;<a href=\"https://forge.laravel.com/\">Forge</a> , sekarang adalah saat yang tepat untuk mendaftar! Forge memungkinkan Anda membuat dan mengelola server PHP dengan mudah yang mencakup MySQL, Redis, Memcached, cadangan basis data, dan semua yang Anda perlukan untuk menjalankan aplikasi Laravel modern yang tangguh.</p>"
      },
      {
        "title": "Apa itu static site generator",
        "slug": "apa-itu-static-site-generator",
        "img": "https://i.ibb.co/ByLSFwp/ssg.jpg",
        "category": "SSG",
        "created_at": "2021-06-25",
        "body": "<p id=\"isPasted\">Ada banyak jalan untuk sampai ke Roma, begitu juga dengan membuat website, ada banyak cara untuk melakukannya. Salah satu tren saat ini adalah membuat website dengan static site generator atau yang dikenal dengan SSG.</p><p>Static Site Generator adalah tool yang akan membantu kita mengubah website yang dibangun menjadi file file statis HTML, CSS dan Javascript untuk dikonsumsi oleh penggunanya nanti.</p><h2 id=\"isPasted\">Apa itu static site generator</h2><p>Kalau diartikan langsung, SSG bisa disebut &quot;penghasil website statis&quot;. Pada dasarnya SSG adalah istilah umum untuk sebuah alat atau software yang bisa menghasilkan halaman statis.</p><p>Apa sih halaman statis? halaman statis adalah halaman yang terbuat dari tiga teknologi andalan web developer yaitu.. HTML, CSS dan javascript (pilihan), di mana tidak ada backend ataupun database yang terlibat langsung di sini.</p><h2>Apa manfaat website statis</h2><p>Hal yang wajar ditanyakan, apa sih manfaat dari membuat website dengan SSG ini? terutama dengan berabagai macam pilihan bahasa program saat ini.</p><p><strong>Lebih Cepat</strong></p><p>Dengan menggunakan website statis saja, artinya kita tidak lagi melakukan &quot;request&quot; ke backend, karena hanya memanggil halaman itu saja. Coba bandingkan saat kamu membuat satu file index.html dan website lain dengan konten yang sama yang menggunakan bahasa backend tertentu, tentu website yang dibuat dengan index.html saja bisa berjalan lebih cepat.</p><p><strong>Lebih Aman</strong></p><p>Karena tidak banyak kode yang berhubungan dengan data atau backend, maka ada banyak celah keamanan yang secara automatis terpangkas alias membuat website kamu lebih aman.</p><p><strong>Hosting Gratis</strong></p><p>Mempublish website dinamis lebih sulit dibanding website dinamis. Penyedia hosting statis yang gratis pun lebih banyak. Nah keuntungan untuk kamu yang memilih SSG, kamu justru akan bingung (bingung yang baik) dengan banyaknya pilihan hosting halaman statis gratis untuk kamu nanti.</p><h2>Website seperti apa yang cocok menggunakan SSG?</h2><p>Website yang bersifat <strong>tidak memiliki&nbsp;</strong>&quot;user generated content&quot; alias konten yang tidak dibuat oleh user penggunanya. Sebagai contoh website forum, punya banyak pertanyaan yang dibuat oleh user. Meskipun kalau mau &quot;memaksakan&quot; pasti akan ada jalan, tapi sifat dasar dari website ssg ini tidak cocok untuk itu.</p><p>Jadi selain dari hal tersebut seperti website pribadi, membuat blog, profil perusahaan, cocok cocok saja.</p><h2>Apa teknologi dibalik SSG?</h2><p>Kita biasanya perlu menginstall program untuk menjalankan SSG ini. Di balik layar, SSG biasanya membaca file markdown yang kita buat dan menjadikannya sebuah halaman HTML dan CSS.</p><p>Tenang saja kalau kamu kepikiran, seperti berarti saya harus selalu membuat header? footer? dan hal fix lainnya dong berkali-kali. Tenang, tidak perlu ko&#39; . Dengan SSG kita seperti membuat website dinamis sendiri. Kita menentukan template yang mau dipakai, tentu bisa kamu buat sendiri, sisanya kamu hanya perlu menambahkan kontennya.</p><p>Ada banyak &quot;apps&quot; yang menawarkan SSG termasuk dari berbagai macam bahasa dan framework. Kabar baiknya alurnya semua hampir sama, kita tidak perlu mempelajari bahasa tersebut untuk bisa mulai menggunakan SSG. Cukup dengan membaca panduan dokumentasinya. Yang normalnya hanya perlu membuat atau memilih template dan sudah bisa mulai membuat halamannya.</p><h2>Apa saja pilihan static site generator</h2><p>Cukup banyak, ada hugo, nuxtjs, nextjs, vuepress, gatsby, gridsome, jigsaw dan masih banyak lagi.</p><p>Orang biasanya memilih berdasarkan bahasa atau framework apa yang selama ini dia gunakan. Dimana nanti akan sangat membantu dalam mengembangkan websitenya.</p><h2>Kekurangan static site generator</h2><p>Diperlukan setup awal, normalnya teman-teman yang sebelumnya belum terbiasa dengan command prompt/ terminal akan merasa aneh, apalagi kalau malas membaca dokumentasi.</p><p>Untuk setiap penambahan halamannya pun akan butuh sedikit waktu lebih dibanding dengan website dinamis. Karena memerlukan &quot;build&quot; time dimana program akan melihat jika ada perubaha sedikitpun di halaman masing-masing dan membuat halamannya.</p><h2>Melengkapi Static Site Generator kamu</h2><p>Ada beberapa fitur yang kamu mungkin perlu memikirkan dua kali untuk menggunakan SSG ini. Tapi pelan-pelan sudah banyak produk yang mengatasi masalahnya.</p><p>Seperti</p><p><strong>membuat komentar</strong> kamu bisa menggunakan:</p><ul><li>disqus</li><li>commento</li><li>hyvor</li><li>talkyard</li><li>dll..</li></ul><p>menerima <strong>submisi form</strong> dengan:</p><ul><li>formspree</li><li>google form</li><li>formkeep</li></ul><p>melakukan autentikasi user:</p><ul><li>netlify go-true</li><li>Auth0</li></ul>"
      },
      {
        "title": "Hugo, framework untuk membuat website statis",
        "slug": "hugo-framework-untuk-membuat-website-statis",
        "img": "https://i.ibb.co/wKhdpK5/Screen-Shot-2020-08-15-at-8-58-53-AM.png",
        "category": "SSG",
        "created_at": "2021-06-15",
        "body": "<p>Ada banyak perlombaan di dunia &quot;static site generator&quot;, salah satu yang sangat populer adalah <a href=\"https://gohugo.io/\">hugo</a>, dengan &quot;jualan&quot; utama di landing pagenya &quot;the world&#39;s fastest framework for building websites&quot; atau diterjemahkan &quot;framework tercepat di dunia untuk membuat website&quot;. Normalnya saya akan bilang, setiap framework pasti punya klaimnya masing-masing, tapi setelah saya menggunakannya, ternyata hugo berhasil membuktikan janjinya! sangat cepat!</p><p>Kita berkenalan dulu sedikit tentang hugo dan fitur apa saja yang dia punya, sebelum kita lompat ke cara membuat websitenya.</p><h2>Apa itu Hugo</h2><p>Hugo adalah proyek open source yang dimulai oleh Bj&oslash;rn Erik Pedersen yang saat ini sudah disponsori oleh banyak perusahaan. Tidak mudah tentunya untuk sebuah proyek open source bisa sampai ke tahap tersebut. Ini menjadi salah satu bukti, kalau banyak orang yang sudah terbantu dengan Hugo.</p><p>Dibuat dengan <a href=\"https://sekolahkoding.com/belajar/go-lang\">bahasa Go Lang</a> , bahasa modern yang terkenal dengan kecepatannya, hugo akan membantu kamu membuat website statis tanpa perlu menunggu lama dalam waktu <em>build</em>-nya.</p><h2>Apa yang bisa dibuat dengan Hugo</h2><p>Seperti membuat blog pada platform besar seperti wordpress, kamu bisa melakukan banyak hal di sini. Seperti sistem kategori, menu dinamis, mengurus SEO dan masih banyak lagi. Karena itu membuat website dengan Hugo akan terasa sangat fleksibel seperti membuat website dengan bahasa dinamis lainnya.</p><p>Seperti <a href=\"https://sekolahkoding.com/artikel/apa-itu-static-site-generator\">SSG(static site generator)</a> pada umumnya, pengguna bisa menggunakan markdown saat ingin menulis kontennya, sayangya markdown dikenal memiliki beberapa keterbatasan, seperti tidak bisa memasukkan iframe. Hugo mengatasi ini dengan fitur &quot;shortcodes&quot; nya, di mana ada beberapa kode yang sudah disediakan dan bisa kita buat sendiri untuk dimasukkan ke markdownnya. Seperti menampilkan iframe, tag figure pada HTML, embed konten sosial media, dan lainnya.</p><p>Kamu juga bisa mengambil konten dari file JSON dengan Hugo jika kamu membutuhkannya.</p><h2>Bagaimana cara install Hugo</h2><p>Hugo bisa digunakan di semua OS pada umumnya seperti: macOS, Windows, Linux, OpenBSD, FreeBSD.</p><p><strong>MacOS dan Linux</strong></p><p>bisa menggunakan package manager <a href=\"https://brew.sh/\">homebrew</a></p><pre>brew install hugo</pre><p><strong>Windows</strong></p><p>menggunakan package manager <a href=\"https://chocolatey.org/\">chocolatey</a></p><pre>choco install hugo -confirm</pre><p>atau menggunakan <a href=\"https://scoop.sh/\">scoop</a></p><pre>scoop install hugo</pre><p>Jika sudah menginstall, kamu bisa konfirmasi berhasil dengan mengetik <code>hugo version .</code></p><p>Jika sudah ada output yang terlihat, berarti instalannya berhasil.</p><p>Ini informasi lengkap <a href=\"https://gohugo.io/getting-started/installing/\">cara install hugo</a></p><h2>Membuat website dengan Hugo</h2><p>Langsung saja cara membuat website baru dengan hugo</p><pre>hugo new site namaProyekMu</pre><p>Perintah di atas akan membuat proyek/folder baru sesuai nama yang kamu masukkan. Silahkan buka text editor untuk melihat instalan dari Hugo.</p><h2>Membuat halaman baru di Hugo</h2><p>Untuk membuat halaman baru di websitemu</p><pre>hugo new posts/post-pertama.md</pre><p>Ini isi dari file tersebut. Kamu bisa mulai menulis postingan di bawah baris yang sudah ada.</p><pre>---\ntitle: &quot;Post Pertama&quot;\ndate: 2020-08-15T09:44:10+08:00\ndraft: true\n---\n\nIni tambahan dari kamu.\nIni halaman pertama.</pre><p>Kamu berhasil membuat satu halaman baru yang lokasinya ada di dalam folder content/posts.</p><p>Baris --- adalah informasi dari file tersebut, yang bisa berisi banyak hal. Pada kasus ini adalah judul dari kontennya, tanggal dibuat dan apakah dia draft atau bukan. Draft berarti kontennya hanya bisa terlihat oleh kamu (pembuatnya).</p><p>Kamu bisa mempublishnya dengan mengganti nilai draft menjadi false.</p><pre>---\ntitle: &quot;Post Pertama&quot;\ndate: 2020-08-15T09:44:10+08:00\ndraft: false\n---</pre><h2>Memberikan Tema Hugo</h2><p>Saat ini website kamu belum punya tema atau template dasar yang bisa kamu lihat. Untuk itu kamu membutuhkan <a href=\"https://git-scm.com/\">git</a> jika belum menginstallnya.</p><pre>git init\ngit submodule add <a href=\"https://github.com/budparr/gohugo-theme-ananke.git\">https://github.com/budparr/gohugo-theme-ananke.git</a> themes/ananke</pre><p>Penjelasan perintah:</p><p><em>git init</em></p><p>Di sini kita menginsialisasi repo baru. Agar bisa mengampil tema berdasarkan link git nya</p><p><em>git submodule add ..</em></p><p>Kita mengimport tema baru bernama &quot;ananke&quot;. Ada banyak pilihan tema Hugo yang bisa kamu ambil di <a href=\"https://themes.gohugo.io/\">themes Hugo</a> . Kamu tinggal memilih salah satunya dan mengganti link repo github di atas berdasarkan info tema masing-masing.</p><p>Di bawah folder &quot;themes&quot; kamu sekarang, sudah banyak informasi mengenal tema tersebut.</p><p>Beritahu website kamu untuk menggunakan tema ini dengan menambahkan</p><p><code>theme = &quot;ananke&quot;&nbsp;</code>di file config.toml kamu</p><p>atau cukup jalankan</p><pre>echo &#39;theme = &quot;ananke&quot;&#39; &gt;&gt; config.toml</pre><h2>Menjalankan server Hugo</h2><p>Sekarang kita jalankan website kamu.</p><pre>hugo server</pre><p>Website kamu sudah jadi! silahkan intip di <a href=\"http://localhost:1313/\">http://localhost:1313/</a> atau baca output dari command tersebut tentang informasi lokasi localhost kamu</p><p><img src=\"https://i.ibb.co/qx8bTVC/Screen-Shot-2020-08-15-at-10-26-14-AM.png\" alt=\"Screen-Shot-2020-08-15-at-10-26-14-AM.png\" class=\"fr-fic fr-dii\"><em>Screen Shot 2020-08-15 at 10.26.14 AM.png</em></p><p><br></p><p>Tulisa &quot;my new hugo site&quot; tersebut adalah judul standar yang ada di file config.toml yang bisa kamu ganti sendiri di config.toml bagian <code>title=&quot;judul website kamu&quot;</code></p><p>Kalau kamu mau menampilkan konten yang masih dalam bentuk draft cukup menambahkan -D</p><pre>hugo server -D</pre><h2>Bagaimana cara mengganti tema Hugo</h2><p>Kamu bosan atau menyesal dengan pilihan tema hugo kamu? Tenang dia ngga YOLO ko, alias cuma bisa satu kali. Kamu bisa kembali ke daftar tema <a href=\"https://themes.gohugo.io/\">themes Hugo</a> dan melakukan hal yang sama seperti sebelumnya.</p><p>Cukup copy paste command git submodule salah satu temanya untuk menginstall.</p><p>Kalau sudah berhasil di folder <code>themes</code> kamu sekarang sudah ada lebih dari satu tema.</p><p>Untuk menggantinya sendiri tinggal ke file konfigurasi config.toml dan mengganti nilai <code>theme = &quot;nama tema pilihan kamu&quot;</code></p><p>Kita akan bermain lagi dengan Hugo di artikel lainnya!</p><p><em>Meta: bagaimana cara install Hugo SSG, apa itu Hugo, cara membuat blog dengan Hugo, cara membuat webiste statis dengan Hugo</em></p>"
      }
    ]
  }
}
