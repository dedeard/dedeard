{
  "navigation": {
    "home": "HOME",
    "about": "ABOUT",
    "blog": "BLOG",
    "portfolio": "PORTFOLIO",
    "contact": "CONTACT",
    "dark_mode": "DARK MODE",
    "light_mode": "LIGHT MODE"
  },
  "home": {
    "title": "DEDEARD | WEB DEVELOPER",
    "app_name": "DEDEARD",
    "app_title": "Web developer based in Makassar, Indonesia.",
    "bg_url": "https://i.ibb.co/c8RLgXS/main.jpg",
    "socials": [
      {
        "label": "INSTAGRAM",
        "url": "https://www.instagram.com/dedeard.js/"
      },
      {
        "label": "GITHUB",
        "url": "https://github.com/dedeardiansya"
      },
      {
        "label": "WHATSAPP",
        "url": "https://api.whatsapp.com/send?phone=6281343912883&text=%3CChatMe%20%2F%3E"
      }
    ]
  },
  "about": {
    "label": "About.",
    "title": "ABOUT | WEB DEVELOPER",
    "heading": "Iâ€™m Dede Ardiansya",
    "body": "<p>Web developer based in Makassar, Indonesia.</p><p>Building websites is my hobby, I try to have a minimalist website design.</p>",
    "img_url": "https://i.ibb.co/3vzGh4G/dede.jpg",
    "id": {
      "heading": "Saya Dede Ardiansya",
      "body": "<p>Pengembang web yang berbasis di Makassar, Indonesia.</p><p>Membangun website adalah hobi saya, saya mencoba memiliki desain website yang minimalis.</p>"
    }
  },
  "portfolio": {
    "label": "Portfolio.",
    "title": "PORTFOLIO | WEB DEVELOPER",
    "items": [
      {
        "type": "Laravel",
        "text": "Disposisi surat",
        "url": "https://github.com/dedeardiansya/deposisi-surat",
        "img": "https://i.ibb.co/G23WQVq/Untitled-1.jpg"
      },
      {
        "type": "Laravel | Nuxt.js",
        "text": "Ajarbelajar",
        "url": "https://ab.dedeard.my.id/",
        "img": "https://i.ibb.co/DVj3dyV/ajarbelajar.jpg"
      },
      {
        "type": "Vue",
        "text": "Web Portfolio",
        "url": "https://demodedeard.web.app/",
        "img": "https://i.ibb.co/kKZRB9g/dedeard.jpg"
      }
    ]
  },
  "contact": {
    "label": "Contact.",
    "title": "CONTACT | WEB DEVELOPER",
    "info": [
      {
        "label": "ADDRESS STREET",
        "items": [
          "D/23 Perumahan Puri diva Istanbul.",
          "Gowa, Sulawesi Selatan."
        ]
      },
      {
        "label": "MOBILE PHONE",
        "items": [
          "Call: +62 813-4391-2883",
          "WhatsApp: +62 813-4391-2883"
        ]
      },
      {
        "label": "ADDRESS EMAIL",
        "items": [
          "me@dedeard.my.id"
        ]
      }
    ],
    "form_url": "https://formspree.io/f/xoqyaqqe"
  },
  "blog": {
    "label": "Blog.",
    "title": "BLOG | WEB DEVELOPER",
    "items": [
      {
        "title": "Filsafat Teknologi. #2 Konsepualisasi Filsafat teknologi.",
        "slug": "filsafat-teknologi-2-konsepualisasi-filsafat-teknologi",
        "img": "https://i.ibb.co/C5wtBtf/photo-1526374965328-7f61d4dc18c5.jpg",
        "category": "Common",
        "created_at": "2021-07-07",
        "body": "<p id=\"isPasted\">Jadi teknologi itu berasal dari kata Yunani, Techne. Artinya adalah Tidak hanya menciptakan sesuatu, tapi berkaitan dengan seni berfikir. Jadi ada seni disana. Seni mengimajinasikan apa yang ingin kita ciptakan.</p><p>Sebenarnya kita harus menggaris bawahi dulu kata &#39;cipta&#39;. Jadi ada 2 kata yang harus kita bisa bedakan, pertama adalah kata Poiesis artinya mencipta dari yang tidak ada menjadi ada, disana itu ada keterlibatan manusia, ada keterlibatan sebab efisien yang mengadakan sesuatu itu. Contohnya seperti software, hardware. Itu sesuatu yang kita buat.</p><p>Nah sedangkan kata kedua adalah Physis artinya, ada karena sendirinya. Ada secara natural -- alamiah. Seperti tumbuh tumbuhan.</p><p>Nah jadi Techne ini adalah ruang lingkup poesis yang lebih luas.</p><p>Karena Techne ini berkaitan tentang menciptakan sesuatu dari yang tidak ada menjadi ada. Maka sebenarnya, techne ini berhubungan langsung terhadap penyingkapan kita. Jadi techne ini berkaitan tentang epistem, yaa walaupun ranah daripadanya berbeda.</p><p>Kalo misalnya epstemologi ranahnya teoritik, sementara techne ini ranah nya praksis. Jadi kata techne ini yang menjadi dasar dari perkembangan berikutnya, hingga kita menyebutnya technologi.</p><p>Tapi mungkin kita bisa melihat perbedaan teche yang era klasik dan techne di era kita sekarang.</p><p>Salahsatu perbedaanya jika misalnya techne untuk mengekspresikan pikiran sementara,sedangkan teknologi untuk mengeksploitasi alam.</p><p>Nah para filusuf dan pemikir era modern ini memberikan persepsinya terhadap eksploitatif alam. Misalnya kaya francis bacon yang bilang &quot;ilmu pengetahuan adalah kekuasaan&quot;. Jadi kalo misalnya dari sana, bisa dikatakan, manusia menganggap semeta alam adalah objek.</p><p>itu mungkin tentang Konsepualisasi Filsafat teknologi.</p><p>Selanjutnya, bagaimana hubungan antara filsafat science dan teknologi ?</p>"
      },
      {
        "title": "Filsafat Teknologi. #1 Apa itu Filsafat Teknologi?",
        "slug": "filsafat-teknologi-1-apa-itu-filsafat-teknologi",
        "img": "https://i.ibb.co/C5wtBtf/photo-1526374965328-7f61d4dc18c5.jpg",
        "category": "Common",
        "created_at": "2021-07-06",
        "body": "<p>Pada dasarnya, Teknologi membuat segala sesuatu itu berubah. Seperti mungkin sudut pandang kita pada waktu dan ruang berubah. Atau bahkan karena teknologi sudut pandang pada diri kitapun berubah.</p><p><strong>Apa itu Filsafat Teknologi ?</strong></p><p>Filsafat teknologi adalah salahsatu cabang dari filsafat kontemporer/Contemporary philosophy kurang lebih sekitar tahun 1970an. Sebenarnya kemuncunlannya ada yang bilang bisa dikatakan terlambat. Karena sebenarnya, teknologi udah berkembang pesat pada abad 15.</p><p>Pertanyaannya, <strong>kenapa bisa terlambat ?</strong>.</p><p>Dulu orang orang beranggapan teknologi dipandang sebagai hal yang negatif. dan teknologi berasosiasi dengan tindak eksploitasi baik pada alam semesta maupun manusia.</p><p>Yang kedua teknologi ternyata melibatkan banyak disiplin ilmu pengetahuan. Seperti antropologi, politik, dan tentunya filsafat science itu sendiri. Karena itu harus memerlukan konsolidasi untuk menjadi satu kajian yang terpisah dari berbagai filsafat kontemporer.</p><p>Orang orang yang berpengaruh di filsafat teknologi siapa saja ?</p><ul><li>Martin Heidegger, Pemikir dari jerman</li><li>Don Ihde, Pemikir dari Amerika</li><li>Jaques Ellul, Seorang filusuf francis</li></ul><p>Orang orang diatas ini membuat kajian spesifik tentang teknologi.</p><p>Jika kita pilah pilah, apa saja sih yang ada pada kajian filsafat teknologi ?</p><ul><li>Konsepualisasi Filsafat teknologi,</li><li>Relasi antara filsafat science dan teknologi,</li><li>Persepsi atau sudut pandang manusia akibat teknologi,</li><li>Relasi antara teknologi dengan manusia.</li></ul>"
      },
      {
        "title": "Penyimpanan Cloud untuk Emulator Firebase: Bagian Terakhir dari Teka-teki",
        "slug": "penyimpanan-cloud-untuk-emulator-firebase-bagian-terakhir-dari-teka-teki",
        "img": "https://www.teahub.io/photos/full/272-2725823_android-firebase.jpg",
        "category": "Firebase",
        "created_at": "2021-07-06",
        "body": "<p id=\"isPasted\">Saat pertama kali mulai mengerjakan Firebase Emulator Suite, kami memimpikan hari dimana setiap layanan backend di Firebase akan memiliki emulator lokal.&nbsp;Hari ini kami dapat dengan bangga mengatakan bahwa kami merilis emulator hebat lainnya untuk produk Firebase Build: Cloud Storage for Firebase emulator.</p><p>Emulator Cloud Storage for Firebase terintegrasi dengan Firebase Emulator Suite lainnya, termasuk emulator Firebase Auth dan emulator Cloud Functions, membuka kemampuan untuk menguji aplikasi Anda secara lokal dari ujung ke ujung yang belum pernah ada sebelumnya.</p><h3 id=\"isPasted\"><strong>Apa itu?</strong></h3><p>Sama seperti komponen lain di Firebase Emulator Suite, emulator Cloud Storage for Firebase adalah bagian dari antarmuka baris perintah Firebase yang memungkinkan Anda mengembangkan dan menguji aplikasi tanpa terhubung ke layanan produksi.</p><p>Emulator Cloud Storage for Firebase mendukung SDK Web, Android, iOS, dan Admin (untuk Node.js), jadi di mana pun aplikasi Anda berjalan, Anda dapat menggunakan emulator baru.</p><h3 id=\"isPasted\"><strong>Apa yang bisa dilakukan?</strong></h3><p>Emulator Cloud Storage for Firebase mendukung semua operasi dari Web, iOS, dan Android SDK.&nbsp;Ini termasuk mengevaluasi aturan keamanan, mengunggah dan mengunduh file, dan memodifikasi metadata.</p><p>Emulator juga mendukung semua metode paling populer di Firebase Admin SDK.&nbsp;Ini mencakup operasi yang sama untuk mengunggah dan mengunduh file bersama dengan operasi metadata.&nbsp;Jika Anda menggunakan fitur Cloud Storage yang lebih canggih yang tidak didukung,&nbsp;<a href=\"https://github.com/firebase/firebase-tools/issues\">beri tahu kami</a> .&nbsp;Kami akan terus memperluas fungsionalitas selama beberapa bulan mendatang dan masukan Anda akan membantu kami memprioritaskan apa yang harus diterapkan.</p><h3><strong>Mulai</strong></h3><p>Pastikan Anda&nbsp;<a href=\"https://firebase.google.com/docs/cli\">memperbarui Firebase CLI</a> ke setidaknya versi&nbsp;<strong>9.11.0</strong> dan menjalankan perintah berikut:</p><p><code>firebase init</code></p><p>Pilih Cloud Storage dan Emulator, saat diminta, pilih emulator Cloud Storage.&nbsp;Jika ini adalah penyiapan pertama kali, Anda harus memilih setiap produk Firebase yang Anda butuhkan, seperti aturan Cloud Functions, Firestore dan Realtime Database, serta situs Hosting.&nbsp;Setelah semua yang Anda butuhkan diinisialisasi, jalankan perintah berikut:</p><p><code>firebase emulators:start</code></p><p>Ini akan memulai Storage Emulator di&nbsp;<strong>localhost:9199</strong> secara default.&nbsp;Buka&nbsp;<a href=\"https://firebase.google.com/docs/emulator-suite/connect_storage\">dokumentasi kami</a><strong>&nbsp;</strong>untuk menghubungkan aplikasi Anda ke emulator baru!</p><h3><strong>Beri tahu kami apa yang Anda butuhkan!</strong></h3><p>Sekarang setiap produk Build di Firebase memiliki emulator lokal, Anda dapat melakukan sebagian besar pengembangan Anda sepenuhnya secara lokal. Kami tidak sabar untuk melihat semua hal baru yang akan Anda bangun dengan produktivitas yang baru dibuka. Pastikan untuk <a href=\"https://twitter.com/Firebase\">mengirimkan tweet</a> kepada <a href=\"https://twitter.com/Firebase\">kami</a> dan beri tahu kami apa yang Anda buat!</p>"
      },
      {
        "title": "Percepat Pengembangan Aplikasi Anda dengan Ekstensi Firebase",
        "slug": "percepat-pengembangan-aplikasi-anda-dengan-ekstensi-firebase",
        "img": "https://1.bp.blogspot.com/-Mx5vP5RhUgA/YL-w0v_gJMI/AAAAAAAAFnU/OTUVU1NRX9AjovySftRDqNZlbG803M9bgCLcBGAsYHQ/s0/Extensions_Updated.png",
        "category": "Firebase",
        "created_at": "2021-07-06",
        "body": "<p id=\"isPasted\">Sebagai pengembang aplikasi, Anda ingin fokus membangun fungsionalitas yang meningkatkan utilitas aplikasi Anda bagi pengguna.&nbsp;Di Firebase, misi kami adalah membantu pengembang aplikasi agar berhasil, dan layanan kami seperti Firebase Authentication, Firestore, Performance Monitoring, Analytics, dan lainnya membantu Anda fokus pada apa yang relevan untuk mengembangkan aplikasi dan memajukan bisnis Anda daripada harus membangun dan menjalankan infrastruktur dan layanan sendiri.</p><p>Dengan Firebase Extensions, kami membawa konsep ini ke level berikutnya dan memudahkan Anda untuk menambahkan fungsionalitas dengan cepat ke aplikasi Anda.&nbsp;Daripada harus mengimplementasikan fitur-fitur ini sendiri, Firebase Extensions memungkinkan Anda untuk menambahkan fungsionalitas yang telah dibuat dan diuji hanya dengan beberapa klik.&nbsp;Selain itu, Firebase Extensions dapat dikonfigurasi, sehingga Anda dapat dengan mudah menyesuaikannya dengan kebutuhan Anda.</p><p><strong>Memecahkan masalah bisnis menggunakan Ekstensi Firebase</strong></p><p>Namun terkadang, Anda membutuhkan lebih banyak kekuatan dan fleksibilitas.</p><p>Misalnya, Anda mungkin memerlukan cara yang mudah digunakan untuk menyiapkan kampanye pemasaran yang mengikuti semua praktik terbaik dan standar industri.&nbsp;Mengirim email saja tidak cukup - Anda memerlukan solusi yang mendukung pilihan ganda, template yang ramping dan indah, dan dasbor yang memberikan wawasan terperinci tentang kampanye Anda.</p><p>Atau, Anda mungkin memerlukan solusi perpesanan pelanggan yang memudahkan untuk menjangkau pengguna Anda secara langsung, di mana pun mereka berada, agar mereka selalu mengetahui status pengiriman mendesak mereka.&nbsp;Dan tentu saja Anda memerlukan solusi yang tumbuh bersama bisnis Anda dan bekerja di pasar dan negara baru tempat Anda berekspansi dan mendukung platform perpesanan lokal.</p><p>Atau - Anda mungkin ingin mengubah blog Anda tentang kopi artisanal menjadi bisnis dengan layanan berlangganan yang memungkinkan Anda menempatkan sebagian konten Anda di balik paywall.</p><p>Menerapkan semua fitur dan integrasi ini sendiri bisa menjadi tugas yang menakutkan, dan - jujur saja - tidakkah Anda lebih suka fokus membangun fungsionalitas inti aplikasi Anda daripada membuang waktu berharga untuk membangun solusi untuk tantangan yang telah dipecahkan orang lain?&nbsp;Lagi pula, orang lain telah menginvestasikan banyak waktu dan pemikiran untuk membangun layanan ini, jadi tidak perlu menemukan kembali kemudi.</p><p>Dengan Firebase Extensions, Anda dapat memanfaatkan solusi yang ada untuk memecahkan masalah bisnis dengan integrasi dari para pemimpin industri seperti MessageBird, Algolia, Mailchimp, dan Stripe.</p><p>Di Google I/O tahun ini, kami mengumumkan Ekstensi Firebase baru berikut:</p><ul><li>The&nbsp;<a href=\"https://firebase.google.com/products/extensions/firestore-algolia-search\">Pencarian dengan Algolia</a> Ekstensi mempermudah pencarian teks lengkap data Firestore Anda dengan Algolia.&nbsp;Untuk mempelajari lebih lanjut tentang ekstensi ini, lihat entri blog Algolia di&nbsp;<a href=\"https://www.algolia.com/blog/product/announcing-the-firebase-algolia-search-extension/\">sini</a> .</li><li>The&nbsp;<a href=\"https://firebase.google.com/products/extensions/mailchimp-firebase-sync\">Mailchimp Firebase Sync</a> data pengguna Perpanjangan syncs dengan penonton Mailchimp untuk mengirimkan kampanye pemasaran email pribadi.&nbsp;Pelajari lebih lanjut tentangnya di&nbsp;<a href=\"https://mailchimp.com/integrations/firebase/\">sini</a> .</li><li>The&nbsp;<a href=\"https://firebase.google.com/products/extensions/firestore-messagebird-send-msg\">Kirim Pesan dengan MessageBird</a> Ekstensi mengirim pesan dan pemberitahuan menggunakan MessageBird percakapan API.&nbsp;Pelajari lebih lanjut tentang cara menggunakannya di&nbsp;<a href=\"https://blog.messagebird.com/posts/get-started-with-the-messagebird-extension-on-firebase\">pos teknis</a> ini&nbsp;.</li></ul><p>Dan tahun lalu, kami meluncurkan&nbsp;<a href=\"https://firebase.google.com/products/extensions/firestore-stripe-subscriptions\">Jalankan Pembayaran Berlangganan dengan Stripe</a> dan&nbsp;<a href=\"https://firebase.google.com/products/extensions/firestore-stripe-invoices\">Kirim Faktur menggunakan Stripe</a> , yang memudahkan untuk mengontrol akses ke konten berbayar dan mengirim faktur bermerek menggunakan sistem pembayaran Stripe.</p><p>Semua Ekstensi ini dibuat dan dikelola oleh perusahaan-perusahaan ini, dan tersedia sebagai sumber terbuka di GitHub.&nbsp;Ini berarti Anda dapat membaca kode sumber dan mempelajari cara pembuatannya, menyesuaikannya dengan kebutuhan spesifik Anda, dan bahkan mengajukan permintaan fitur untuk fungsionalitas baru.&nbsp;Sebagian besar pengguna akses awal kami telah memberi tahu kami bahwa opsi konfigurasi yang tersedia di Ekstensi dan kekuatan serta fleksibilitas layanan mitra kami memenuhi sebagian besar persyaratan mereka.</p><p><strong>Jalan di depan</strong></p><p>Dalam semangat misi kami, kami ingin menghadirkan lebih banyak Ekstensi Firebase ke platform untuk memungkinkan Anda fokus pada hal yang paling penting bagi Anda: mengimplementasikan versi terbaik aplikasi Anda untuk memecahkan masalah bisnis nyata dan menyenangkan pengguna Anda.</p><p>Jika Anda memiliki saran untuk Firebase Extensions, fitur apa pun yang Anda ingin kami terapkan, atau mitra apa pun yang Anda ingin kami bawa ke platform, jangan ragu untuk menghubungi kami menggunakan formulir&nbsp;<a href=\"https://firebase.google.com/support/troubleshooter/report/features\">masukan</a> .</p><p>Kami tidak sabar untuk melihat apa yang Anda buat selanjutnya dengan Firebase Extensions baru, dan kami menantikan kabar dari Anda!</p>"
      },
      {
        "title": "Firebase Realtime Database Diluncurkan di Singapura",
        "slug": "firebase-realtime-database-diluncurkan-di-singapura",
        "img": "https://1.bp.blogspot.com/-bnyO25NPAqw/YK7hvv6kxeI/AAAAAAAAFlQ/VM0P7yd5Ku40k11Bf9EFXQK6hUHNJbuNACLcBGAsYHQ/s0/Firebase-realtime-database-launches-in-singapore-social%2B%25281%2529.png",
        "category": "Firebase",
        "created_at": "2021-07-06",
        "body": "<p id=\"isPasted\">Pada bulan November, kami&nbsp;<a href=\"https://firebase.googleblog.com/2020/11/realtime-database-region-and-api.html\">menambahkan lokasi baru pertama untuk Realtime Database di</a> luar Amerika Serikat, di Belgia.&nbsp;Hari ini, kami menambahkan Singapura juga.&nbsp;Kami mendorong setiap pengembang Firebase dengan basis pengguna yang besar di Asia untuk mempertimbangkan menggunakan lokasi baru ini untuk mengurangi latensi.</p><p>Semua developer Firebase baru dan yang sudah ada dapat membuat database di Singapura.&nbsp;Pengembang pada paket berbayar kami dapat membuat beberapa basis data, bahkan menggabungkan basis data di beberapa lokasi dalam satu proyek.</p><p>Kami juga mengumumkan bahwa ketiga lokasi &mdash; Amerika Serikat, Belgia, dan Singapura &mdash; Tersedia Secara Umum.&nbsp;Mereka siap untuk data produksi Anda hari ini.</p><p>Masuk ke konsol Firebase untuk membuat database di Singapura, atau lihat&nbsp;<a href=\"https://firebase.google.com/docs/reference/rest/database/database-management/rest/\">dokumentasi</a> kami&nbsp;untuk mempelajari cara menggunakan API kami untuk menyediakan database secara terprogram.</p><p>Kami senang Realtime Database sekarang memiliki lokasi di seluruh dunia, dan kami tidak sabar untuk melihat apa yang Anda buat.</p>"
      },
      {
        "title": "Jangan Ngoding Terus",
        "slug": "jangan-ngoding-terus",
        "img": "https://i.ibb.co/n7P7twm/randypodcast-1.png",
        "category": "Common",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Jangan Ngoding terus, ada banyak hal yang kamu harus kuasai diluar ngoding,</p><p>Sepintar pintarnya, sehebat hebatnya kamu ngoding, engga akan kepake, jika engga memperhatikan poin poin ini.</p><p>Pertama, adalah komunikasi. Tidak hanya hebat berkomunikasi dengan komputer, dengan beragam bahasa pemrogramannya, kamu yang pada hakikatnya adalah manusia sosial, sangat dituntut harus bisa berkomunikasi dengan manusia lainnya. Karena, komunikasi sangat lah penting.</p><p>Di dunia kerja sendiri, baik itu kerja di instansi, ataupun sebagai kerja freelancer, komunikasi dibutuhkan untuk bekerja sama dengan client. Tentunya komunikasi yang baik, akan menghasilkan feedback yang baik. Komunikasi lainnya adalah, ketika kamu ingin mempromosikan suatu produk buatan sendiri, mau orang orang pake produknya gimana, kalo misalnya kamu engga bisa berkomunikasi dengan baik.</p><p>Sekali lagi, Tentunya komunikasi yang baik, akan menghasilkan feedback yang baik.</p><p>Yang kedua, adalah sikap disiplin, banyak programmer yang selalu dikejar deadline, dan bahkan di hari deadlinenya, project tersebut masih keteteran. Kamu harus tetap disiplin. Khusus nya jika sebagai programmer, harus belajar tentang manajemen projek, salahsatu didalam nya, ada manajemen waktu.</p><p>Ketika diberi deadline, kita ambil contoh, deadline kamu hanya di beri waktu 2 minggu. Disana, sebelum mengerjakan project, buatlah project tersebut ke bagian bagian kecil. Kemudian, tinggal perkirakan atau buat patokan,</p><p>&ldquo; oke, untuk bagian A, saya kerjakan 2 hari, untuk bagian B, pasti beres 1 hari juga &ldquo;.</p><p>Ketika H-1 sebelum deadline, project kamu diharapkan telah selesai, 1 hari tersisa tersebut, tinggal pikirkan, bagaimana kamu pempersentasikan project ke client.</p><p>Dengan begitu, disiplin membuat kita menjadi lebih tenang di akhir, sehingga hasilnya akan memuaskan client, dan kamu juga.</p><p>Yang ketiga, adalah berani mengambil resiko. Jangan menjadi penakut untuk mengambil resiko, jika kamu ingin berkembang menjadi lebih baik, harus bisa mengambil resiko, tak apa jika gagal, karena kegagalan itu potongan potongan puzzle kesuksesan.</p><p>Artinya, berani mengambil resiko sama dengan berani bertanggung jawab. Jangan menjadi, resiko yang kamu ambil, jadi beban berat bagi diri sendiri. Jadikanlah hal itu menjadi bagian dari kamu, dibawa santai dan pikirkan hal kedepannya.</p><p>Tentu, jika semua resiko yang di ambil dengan berani dan siap, kamu akan membuahkan hasil yang positif juga.</p><p>Yang keempat, adalah jaga pola tidur, hal identik dari seorang programmer adalah begadang, seperti, kata rhoma irama, musisi dangdut legendaris indonesia, &ldquo; jangan begadang kalo tidak ada artinya &ldquo;, dan saya pun sangat tidak menyarankan kamu untuk begadang.</p><p>Programmer juga, harus menjaga kesehatan fisiknya, tidur, dianjurkan 6&ndash;8 Jam sehari, karena otak kita membutuhkan istirahat yang cukup, bersamaan dengan seluruh tubuh kita yang lain juga.</p><p>Karena, jika kamu kurang tidur, kamu akan kehilangan fokus, dan bisa mempengaruhi pekerjaan atau project yang dikerjakan, itu dampak buat diri sendiri, namun, gimana kalo misalnya kamu bekerja dalam tim, ketidakfokusan, akan berdampak fatal pada pekerjaan project tim.</p><p>Jadi jagalah fisik, terutama pola tidur.</p><p>Itu adalah beberapa poin yang kamu harus perhatikan, sekali lagi, jangan ngoding terus.</p><p>Banyak diluar sana, programer programer yang pasif, yang tidak memperhatikan poin poin diatas dengan baik, alhasil, mereka kesulitan untuk menghidupi kebutuhannya, atau bahkan hingga keluarganya.</p>"
      },
      {
        "title": "Tips menulis artikel atau tutorial tentang programming",
        "slug": "tips-menulis-artikel-atau-tutorial-tentang-programming",
        "img": "https://i.ibb.co/zNnDFnM/fromunsplash.png",
        "category": "Common",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Hai semuanya! untuk teman-teman yang suka berbagi ilmu, tentu media menulis sudah tidak asing lagi. Media pencari populer pun sampai saat ini pun masih berbasis text atau tulisan. Jadi wajar saja kalau kita masih terus memanfaatkan media tulisan seperti blog atau artikel untuk berbagi, termasuk untuk teman-teman di dunia programming.</p><p>Saya ada beberapa tips yang bisa kamu coba, jangan sungkan untuk membagikan apa yang sudah kamu dapatkan selama ini dan terlewatkan di sini.</p><p>&nbsp;</p><p>Memilih topik yang ingin dibahas</p><p>Seringkali saat mengobrol atau menulis, tanpa sadar kita terlalu banyak membahas sesuatu, orang yang membaca pun akhirnya tidak fokus. Sangat penting untuk kamu menentukan poin-poin apa sebenarnya inti dari tulisanmu. Jangan terbawa suasana. Jika terlalu panjang kamu bisa membaginya ke beberapa artikel. Jika pendek, itu semakin bagus, karena kebanyak orang pun ingin mencari &quot;inti&quot; dari pertanyaan yang ingin dia jawab.</p><p>&nbsp;</p><p>Mengetahui level target pembaca</p><p>Jika tidak mengetahui target pembaca sebenarnya, akhirnya kita akan membuat konten yang &quot;terlalu mudah atau terlalu susah&quot; untuk salah satu pihak. Atau yang sering terjadi, kamu menjadi membahas sesuatu dari awal (dari sangat dasar) padahal poin dari artikel kamu bukan hal tersebut.</p><p>Sebagai contoh kamu ingin mengajarkan bagaimana membuat sistem drag dan drop gambar dengan javascript. Tapi kamu selalu menulis &quot;jika kamu tidak tahu apa itu javascript&quot; atau &quot;kalau kamu belum tahu apa itu event, event adalah....&quot;. Akhirnya kita menjelaskan semuanya dari awal lagi. Padahal bukan itu poinnya. Bikin asumsi di awal, siapa yang ingin kamu ajarkan, apakah orang yang sudah mengerti javascript? atau yang belum. Sehingga kamu tidak kehilangan pembaca di tengah jalan.</p><p>&nbsp;</p><p>Membagikan kode jika perlu</p><p>Artikel yang membahas seputar teknikal kode, jangan lupa menyelipkan kode agar bisa dilihat langsung. Menjelaskan hal yang teknikal tanpa memperlihatkan kode aslinya akan sulit untuk dicerna.</p><p>Sebagai contoh kita mau membahas &quot;fungsi drag dan drop javascript&quot;, maka saya akan memperlihatkan kodenya seperti ini misalnya:</p><p>function&nbsp;drop(ev)&nbsp;{</p><p>&nbsp; ev.preventDefault();</p><p>&nbsp; var data = ev.dataTransfer.getData(&quot;text&quot;);</p><p>&nbsp; ev.target.appendChild(document.getElementById(data));</p><p>}</p><p>&nbsp;</p><p>Memberikan analogi sederhana</p><p>Tidak semua konsep yang ada di programming mudah dipahami begitu saja. Untuk membantu orang lain mencernanya, berikan analogi atau permisalan sederhana.</p><p>Sebagai contoh kita ingin mengenalkan konsep array. Kita bisa bilang &ldquo;bayangkan ada beberapa kotak&rdquo;, sehingga pembaca atau penonton bisa membayangkan &ldquo;oh.. array ini seperti tempat penyimpanan&rdquo;</p><p>Pastikan memberi contoh yang memang mudah dipahami, jangan sebaliknya justru semakin membuatnya kompleks</p><p>&nbsp;</p><p>Jangan takut berbagi</p><p>Apa yang menurut kamu sudah jelas, belum tentu untuk orang lain.</p><p>Apa yang menurut kamu mudah, bisa jadi sulit untuk orang lain.</p><p>Jangan malu atau takut membagikan apa yang kamu tahu.</p><p>Mengajar atau berbagi bukan sok pintar,</p><p>justru sebaliknya,</p><p>dengan berbagi kita siap menerima masukan dan belajar dari orang lain</p><p>Selamat menulis dan berkarya!</p>"
      },
      {
        "title": "Belajar ketika project? Atau belajar dulu baru ngebuat project?",
        "slug": "belajar-ketika-project-atau-belajar-dulu-baru-ngebuat-project",
        "img": "https://i.ibb.co/3TDtdZ2/Belajar-ketika-project-Atau-belajar-dulu-baru-ngebuat-project.png",
        "category": "Common",
        "created_at": "2021-07-05",
        "body": "<p>Belajar Ketika Project, artinya, kamu memiliki tekad dan motivasi yang tinggi disini. Positif dari belajar ketika project adalah kamu langsung terjun ke studikasus yang ada. Yang kamu garap. Belajar sesuai kebutuhan, itu poinnya. Kamu memutuskan untuk belajar hal hal yang diperlukan sesuai studikasus. Dengan kata lain, kamu engga harus belajar segala hal. Bagus ? Tentu bagus.</p><p>Positifnya lagi, kamu akan terbiasa menangani permasalahan dengan metode pemecahannya. Terpaksa, dipaksa, dan terbiasa.</p><p>Namun permasalahan belajar ketika project adalah, kamu lupa poin poin lain, kamu engga pelajari itu. Statementnya mungkin bertolak belakang dari nilai positifnya. Tapi mungkin inilah kerugian yang didapat ketika belajar ketika project. Jika diperumpamakan, Belajar ketika project adalah,</p><blockquote><p>kamu Langsung terjun bertahan hidup di sebuah hutan yang engga dikenal, Tapi engga punya apa apa.</p></blockquote><p>Selanjutnya, Belajar dulu baru ngebuat project. Ini mungkin yang biasa ada di sistem pendidikan Indonesia, anggaplah seorang mahasiswa. Mahasiswa di didik untuk belajar dulu keseluruhan basic/dasar dari suatu hal. Ini menjadikan ilmu yang didapat menjadi pondasi kedepannya. Kemudian dengan belajar terlebih dahulu, Kamu akan siap untuk mengerjakan project.</p><p>Namun permasalahan dari metode ini, kamu awalnya akan kaget karena tidak terbiasa dengan studikasus, mental yang dipertaruhkan disini, kamu akan kesusahan diawal. nah jika diperumpamakan, belajar dulu baru ngebuat project adalah,</p><blockquote><p>kamu Langsung terjun bertahan hidup di sebuah hutan yang engga dikenal, Tapi sudah punya bekal yang cukup.</p></blockquote><p>Jadi manakah yang lebih baik ? Belajar ketika project ? Atau belajar dulu baru ngebuat project ?</p><p>Jawabannya adalah satukan semuanya. Belajar lah dengan project dari dasar. Buat segala macam studikasus diiringi dengan belajar kamu. Engga usah ngebuat project besar, buat project kecil yang tentunya akan membesar.</p><p>Sebenarnya ada langkah awal untuk membuat project, Tentunya, tentukan dulu apa yang akan kamu buat. Jika kata bang Hilman, Tentukan tujuan dulu. Dari sana kamu tinggal buat roadmap project dan diiringi pembelajaran kamu.</p><p>Ambil contoh, Kamu akan buat website pribadi, disana kamu pasti akan belajar dulu HTML, kemudian CSS, kemudian JavaScript, dan seterusnya hingga websitenya di hosting di internet. Belajar seperti inilah yang produktif. Engga ada ilmu yang akan sia sia kamu pelajari disini.</p><p>Bagaimana cara belajar kamu sekarang ?</p>"
      },
      {
        "title": "Penting nggak sih memilih kombinasi warna website?",
        "slug": "penting-nggak-sih-memilih-kombinasi-warna-website",
        "img": "https://i.ibb.co/qmQkXKS/Kenapa-Go-Bisa-Populer-2.jpg",
        "category": "Design",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Ya tentunya penting dong. Apalagi jika sudah membuat brand, memilih kombinasi warna website yang sesuai dengan personalitas brand merupakan sebuah keharusan, agar para customer atau pembaca akan lebih mudah mengenali dan mengingat suatu brand.</p><p>Tidak hanya itu, manfaat memilih kombinasi warna yang tepat adalah warna website bisa menentukan kesan pertama pengunjung. Jadi hati-hati dalam memilih dan menempatkan warna.</p><p>1. Pilih primary color</p><p>Pilih warna yang sesuai Brand atau tema website dan sesuai dengan namanya yaitu primary color. Usahakan warna utama ini harus lebih menonjol atau dominan.</p><p>2. Pilih satu atau dua warna tambahan yang melengkapi warna</p><p>Hanya menggunakan primary color saja tidak cukup. Anda perlu memilih warna lain agar penampilan website tidak terlihat membosankan. Cara yang paling direkomendasikan adalah memilih a triadic color scheme atau kombinasi tiga warna. Untuk melakukannya Anda dapat mengikuti 60-30-10 rule, yakni:</p><p>-60% warna utama (primary color)</p><p>-30% warna sekunder (secondary color)</p><p>-10% warna aksen (accent color)</p><p>3. Tambahkan warna netral</p><p>Warna netral adalah salah satu komponen penting dalam website, yang dimana berfungsi untuk membuat teks lebih terbaca dan menjaga keseimbangan antara element - element dalam suatu website (teks, gambar, animasi, dan sebagainya)</p><p>4. Pilih warna untuk latar belakang situs web</p><p>Ini adalah tips penting, karena latar belakang situs web Anda secara teoritis akan memakan lebih banyak ruang daripada warna lain. Anda bisa menggunakan latar abu-abu halus untuk lebih menyejukan mata, bisa juga menggunakan warna putih seperti website pada umumnya. Atau jika ingin menggunakan tema gelap, Anda boleh menggunakan latar berwarna hitam.</p><p>5. Pertimbangkan aspek psikologi warna</p><p>Jika belum memiliki brand Anda disarankan mempertimbangkan aspek psikologi warna. Sadar atau tidak, warna juga turut menyumbang pengaruh signifikan terhadap pemikiran seseorang. Maka dari itu Anda bisa menggunakan teknik psikologi warna untuk menarik lebih banyak pengguna.</p><p>Dan untuk mencari warna, Anda bisa menggunakan online tools seperti color picker atau bisa mengunjungi website seperti <a href=\"https://brandcolors.net\">https://brandcolors.net</a> atau <a href=\"https://coolors.co/\">https://coolors.co/</a></p>"
      },
      {
        "title": "Unit Tes Komponen Vue",
        "slug": "unit-tes-komponen-vue",
        "img": "https://www.petanikode.com/img/vuejs/vuejs.png",
        "category": "Vue",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Unit testing merupakan bagian dasar dalam pengembangan perangkat lunak. Unit tests menjalankan unit terkecil pada sebuah kode dalam kondisi terisolasi, bertujuan untuk meningkatkan kemudahan di dalam penambahan fitur-fitur baru dan melacak&nbsp;<em>bug</em>.&nbsp;<a href=\"https://docs.vuejs.id/v2/guide/single-file-components.html\">Single-file components</a> Vue memudahkan untuk menulis unit tests komponen dalam kondisi terisolasi. Hal ini membuat anda percaya diri dalam mengembangakan fitur-fitur baru tanpa menggangu kode yang ada dan membantu pengembang lainnya memahami apa yang komponen anda lakukan.</p><p>Ini contoh tes sederhana apakah beberapa text di-<em>render</em>:</p><pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;input v-model=&quot;username&quot;&gt;\n    &lt;div \n      v-if=&quot;error&quot;\n      class=&quot;error&quot;\n    &gt;\n      {{ error }}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;Hello&#39;,\n  data () {\n    return {\n      username: &#39;&#39;\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length &lt; 7\n        ? &#39;Please enter a longer username&#39;\n        : &#39;&#39;\n    }\n  }\n}\n&lt;/script&gt;</code></pre><pre><code>import { shallowMount } from &#39;@vue/test-utils&#39;\nimport Hello from &#39;./Hello.vue&#39;\n\ntest(&#39;Hello&#39;, () =&gt; {\n  // render the component\n  const wrapper = shallowMount(Hello)\n\n  // should not allow for `username` less than 7 characters, excludes whitespace\n  wrapper.setData({ username: &#39; &#39;.repeat(7) })\n\n  // assert the error is rendered\n  expect(wrapper.find(&#39;.error&#39;).exists()).toBe(true)\n\n  // update the name to be long enough\n  wrapper.setData({ username: &#39;Lachlan&#39; })\n\n  // assert the error has gone away\n  expect(wrapper.find(&#39;.error&#39;).exists()).toBe(false)\n})</code></pre><p>Cuplikan kode diatas menunjukan bagaimana melakukan tes apakah pesan galat di-<em>render</em> berdasarkan panjang dari username. Itu menampilkan ide umum dari unit tes pada komponen Vue: me-<em>render</em> komponen dan menegaskan bahwa markup cocok dengan kondisi komponen.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/unit-testing-vue-components.html#Kenapa-melakukan-tes\">Kenapa melakukan tes?</a></h2><p>Komponen unit test memiliki banyak keuntungan:</p><ul><li>Menyediakan dokumentasi bagaimana perilaku komponen seharusnya</li><li>Menghemat waktu terhadap test secara manual</li><li>Mengurangi&nbsp;<em>bug</em> pada fitur-fitur baru</li><li>Meningkatkan rancangan</li><li>Memfasilitasi refaktor kode</li></ul><p>Tes terautomasi mengizinkan tim pengembang memelihara basis kode yang komplek.</p><h4><a href=\"https://docs.vuejs.id/v2/cookbook/unit-testing-vue-components.html#Panduan-memulai\"></a>Panduan memulai</h4><p><a href=\"https://github.com/vuejs/vue-test-utils\">Vue Test Utils</a> merupakan&nbsp;<em>library</em> resmi untuk unit tes pada komponen Vue.&nbsp;<a href=\"https://github.com/vuejs/vue-cli\">Vue-cli</a> <code>webpack</code> templat hadir baik dengan Karma atau Jest, keduanya mendukung&nbsp;<em>test runners</em> dan ada beberapa&nbsp;<a href=\"https://vue-test-utils.vuejs.org/guides/\">panduan</a> pada dokumentasi Utilitas Vue Tes.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/unit-testing-vue-components.html#Contoh-Nyata\">Contoh Nyata</a></h2><p>Unit tes seharusnya:</p><ul><li>Cepat saat dijalankan</li><li>Mudah dipahami</li><li>Hanya melakukan tes&nbsp;<em>single unit of work</em></li></ul><p>Mari kita lanjutkan pengembangan pada contoh sebelumnya, disamping memperkenalkan ide dari&nbsp;<a href=\"https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)\">factory function</a> untuk membuat tes kita lebih tersusun rapat dan mudah dibaca. Komponen tersebut seharusnya:</p><ul><li>Menampilkan salam &lsquo;Welcome to the Vue.js cookbook&rsquo;.</li><li>Meminta pengguna memasukan username mereka.</li><li>Menampilkan sebuah pesan galat jika username yang dimasukkan kurang dari tujuh kata.</li></ul><p>Mari kita lihat kode komponen dibawah:</p><pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;message&quot;&gt;\n      {{ message }}\n    &lt;/div&gt;\n    Enter your username: &lt;input v-model=&quot;username&quot;&gt;\n    &lt;div \n      v-if=&quot;error&quot;\n      class=&quot;error&quot;\n    &gt;\n      Please enter a username with at least seven letters.\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;Foo&#39;,\n\n  data () {\n    return {\n      message: &#39;Welcome to the Vue.js cookbook&#39;,\n      username: &#39;&#39;\n    }\n  },\n\n  computed: {\n    error () {\n      return this.username.trim().length &lt; 7\n    }\n  }\n}\n&lt;/script&gt;</code></pre><p>Hal-hal yang seharusnya kita tes adalah:</p><ul><li>Apakah variabel message di-<em>render</em>?</li><li>Jika&nbsp;<code>error</code> bernilai&nbsp;<code>true</code>,&nbsp;<code>&lt;div class=&quot;error&quot;&gt;</code> harusnya muncul</li><li>Jika&nbsp;<code>error</code> bernilai&nbsp;<code>false</code>,&nbsp;<code>&lt;div class=&quot;error&quot;&gt;</code> harusnya tidak muncul</li></ul><p>Dan percobaan pertama pada tes:</p><pre><code>import { shallowMount } from &#39;@vue/test-utils&#39;\nimport Foo from &#39;./Foo.vue&#39;\n\ndescribe(&#39;Foo&#39;, () =&gt; {\n  it(&#39;renders a message and responds correctly to user input&#39;, () =&gt; {\n    const wrapper = shallowMount(Foo, {\n      data: {\n        message: &#39;Hello World&#39;,\n        username: &#39;&#39;\n      }\n    })\n\n    // see if the message renders\n    expect(wrapper.find(&#39;.message&#39;).text()).toEqual(&#39;Hello World&#39;)\n\n    // assert the error is rendered\n    expect(wrapper.find(&#39;.error&#39;).exists()).toBeTruthy()\n\n    // update the `username` and assert error is no longer rendered\n    wrapper.setData({ username: &#39;Lachlan&#39; })\n    expect(wrapper.find(&#39;.error&#39;).exists()).toBeFalsy()\n  })\n})</code></pre><p>Ada beberapa masalah dengan code di atas:</p><ul><li>Sebuah tes tunggal membuat&nbsp;<em>assertions</em> tentang banyak hal berbeda</li><li>Sulit menunjukkan perbedaan kondisi komponen yang dapat masuk serta apa yang seharusnya di-<em>render</em></li></ul><p>Contoh di bawah ini memperbaiki tes dengan cara:</p><ul><li>Hanya membuat satu&nbsp;<em>assertion</em> tiap blok&nbsp;<code>it</code></li><li>Memiliki deskripsi tes yang singkat dan jelas</li><li>Menyediakan hanya data minimal yang diperlukan untuk tes</li><li>Merefaktor logika ganda (membuat&nbsp;<code>wrapper</code> dan menata variabel&nbsp;<code>username</code>) kedalam&nbsp;<em>factory function</em></li></ul><p><em>tes terbaru</em>:</p><pre><code>import { shallowMount } from &#39;@vue/test-utils&#39;\nimport Foo from &#39;./Foo&#39;\n\nconst factory = (values = {}) =&gt; {\n  return shallowMount(Foo, {\n    data: { ...values  }\n  })\n}\n\ndescribe(&#39;Foo&#39;, () =&gt; {\n  it(&#39;renders a welcome message&#39;, () =&gt; {\n    const wrapper = factory()\n\n    expect(wrapper.find(&#39;.message&#39;).text()).toEqual(&quot;Welcome to the Vue.js cookbook&quot;)\n  })\n\n  it(&#39;renders an error when username is less than 7 characters&#39;, () =&gt; {\n    const wrapper = factory({ username: &#39;&#39;  })\n\n    expect(wrapper.find(&#39;.error&#39;).exists()).toBeTruthy()\n  })\n\n  it(&#39;renders an error when username is whitespace&#39;, () =&gt; {\n    const wrapper = factory({ username: &#39; &#39;.repeat(7) })\n\n    expect(wrapper.find(&#39;.error&#39;).exists()).toBeTruthy()\n  })\n\n  it(&#39;does not render an error when username is 7 characters or more&#39;, () =&gt; {\n    const wrapper = factory({ username: &#39;Lachlan&#39;  })\n\n    expect(wrapper.find(&#39;.error&#39;).exists()).toBeFalsy()\n  })\n})</code></pre><p><br></p><p>poin-poin catatan:</p><p>Pada contoh di atas, kita mendeklarasikan factory function yang mengabungkan objek&nbsp;<code>values</code> ke dalam&nbsp;<code>data</code> dan mengembalikan&nbsp;<code>wrapper</code> <em>instance</em> baru. Dengan cara ini, kita tidak perlu menduplikasi&nbsp;<code>const wrapper = shallowMount(Foo)</code> pada tiap tes. Keuntungan besar lainnya ialah saat komplek komponen dengan metode atau&nbsp;<em>computed property</em> yang ingin Anda&nbsp;<em>mock</em> atau&nbsp;<em>stub</em> dalam tiap tes, Anda hanya perlu mendeklarasikannya satu kali.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/unit-testing-vue-components.html#Konteks-Tambahan\">Konteks Tambahan</a></h2><p>Tes di atas cukup sederhana, namun dalam parkteknya komponen Vue sering memiliki perilaku berbeda yang ingin Anda tes, seperti:</p><ul><li>Membuat pemanggilang API</li><li><em>Committing</em> atau&nbsp;<em>dispatching mutations</em> atau&nbsp;<em>actions</em> dengan&nbsp;<code>Vuex</code> store</li><li>Tes interaksi</li></ul><p>Ada contoh lebih lengkap yang menampilkan tes tersebut dalam Utilitas Vue Tes&nbsp;<a href=\"https://vue-test-utils.vuejs.org/guides/\">panduan</a>.</p><p>Utilitas Vue Tes dan ekosistem JavaScript yang sangat besar menyediakan banyak perkakas untuk memfasilitasi hampir 100% cakupan tes. Bagaimanapun Unit tes hanya merupakan salah satu bagian dari piramida tes. Beberapa tipe tes lainnya mencakup e2e (end to end) tes, dan&nbsp;<em>snapshot</em> tes. Unit tes merupakan test paling kecil dan paling simpel - Unit tes membuat&nbsp;<em>assertions</em> di dalam unit terkecil pada kerja kode, mengisolasi tiap bagian komponen tunggal.</p><p><em>Snapshot</em> tes menyimpan markup dari komponen Vue Anda, dan membandingkan dengan yang baru dibuat tiap tes dijalankan. Jika sesuatu berubah, pengembang diinformasikan, dan dapat memutuskan jika perubahan memang diperlukan (komponen diperbarui) atau secara sengaja (komponen berperilaku tidak semestinya).</p><p>End to end tes memastikan beberapa komponen berinteraksi dengan semestinya secara bersama-sama. End to end tes merupakan tingkat yang lebih tinggi. Beberapa contoh mungkin melakukan tes apakah pengguna dapat&nbsp;<em>sign up</em>,&nbsp;<em>login</em>, dan memperbarui username mereka. Hal itu lebih lambat dijalankan daripada unit tes atau&nbsp;<em>snapshot</em> tes.</p><p>Unit tes merupakan yang paling berguna saat pengembangan, baik membantu pengembang berfikit bagaimana merancang komponen atau merefaktor komponen yang ada, dan sering dijalankan setiap terdapat perubahan kode.</p><p>Tes dengan tingkat yang lebih tinggi, seperti end to end tes, berjalan lebih lambat. Hal ini biasanya berjalan saat&nbsp;<em>pre-deploy</em> untuk memastikan tiap bagian dari sistem berkerja dengan semestinya bersama-sama.</p><p>Informasi lebih lanjut tentang tes komponen Vue dapat ditemukan pada&nbsp;<a href=\"https://www.manning.com/books/testing-vuejs-applications\">Tes Aplikasi Vue.js</a> dibuat oleh anggota tim inti&nbsp;<a href=\"https://eddyerburgh.me/\">Edd Yerburgh</a>.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/unit-testing-vue-components.html#Kapan-Menghidari-Pola-ini\">Kapan Menghidari Pola ini</a></h2><p>Unit tes merupakan bagian penting dari aplikasi serius. Awalnya, saat visi aplikasi tidak jelas, unit tes mungkin saja meperlambat pengembangan, namun sekali visi dibangun dan pengguna nyata akan berinteraksi dengan aplikasi tersebut, unit tes (dan tipe automasi tes lainnya) sangatlah penting untuk memastikan basis kode terpelihara dan&nbsp;<em>scalable</em>.</p>"
      },
      {
        "title": "Membuat Scroll Directives Khusus",
        "slug": "membuat-scroll-directives-khusus",
        "img": "https://www.petanikode.com/img/vuejs/vuejs.png",
        "category": "Vue",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Ada kalanya kita ingin menambahkan sedikit perilaku, terutama animasi, untuk melakukan&nbsp;<em>scroll</em> di situs. Ada banyak cara untuk melakukannya, tetapi jalur dengan jumlah kode dan dependensi yang paling sedikit adalah menggunakan&nbsp;<a href=\"https://vuejs.org/v2/guide/custom-directive.html\"><em>custom directive</em></a> untuk membuat kail/<em>hook</em> untuk apapun yang memicu&nbsp;<em>scroll event</em> tertentu.</p><pre><code>Vue.directive(&#39;scroll&#39;, {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener(&#39;scroll&#39;, f)\n      }\n    }\n    window.addEventListener(&#39;scroll&#39;, f)\n  }\n})\n\n// main app\nnew Vue({\n  el: &#39;#app&#39;,\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY &gt; 50) {\n        el.setAttribute(\n          &#39;style&#39;,\n          &#39;opacity: 1; transform: translate3d(0, -10px, 0)&#39;\n        )\n      }\n      return window.scrollY &gt; 100\n    }\n  }\n})</code></pre><pre><code>&lt;div id=&quot;app&quot;&gt;\n  &lt;h1 class=&quot;centered&quot;&gt;Scroll me&lt;/h1&gt;\n  &lt;div\n    v-scroll=&quot;handleScroll&quot;\n    class=&quot;box&quot;\n  &gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><p>Ingat!&nbsp;<em>Directive</em> harus didaftarkan sebelum&nbsp;<em>Vue instance</em>.</p><p>Kita juga membutuhkan&nbsp;<em>style property</em> yang akan mentransiisikan nilai perentara di sini, pada kasus ini:</p><pre><code>.box {\n  transition: 1.5s all cubic-bezier(0.39, 0.575, 0.565, 1);\n}</code></pre><p><br></p><p><iframe src=\"https://codepen.io/sdras/embed/983220ed949ac670dff96bdcaf9d3338?height=450&theme-id=5162&slug-hash=983220ed949ac670dff96bdcaf9d3338&default-tab=result&user=sdras&embed-version=2&pen-title=Custom%20Scroll%20Directive-%20CSS%20Transition&name=cp_embed_1\"></iframe></p><p><br></p><p>Atau, dengan&nbsp;<em>GreenScok(GSAP)</em> atau pustaka animasi&nbsp;<em>JavaScript</em> lainnya, kodenya akan menjadi lebih simpel.</p><pre><code>Vue.directive(&#39;scroll&#39;, {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      if (binding.value(evt, el)) {\n        window.removeEventListener(&#39;scroll&#39;, f)\n      }\n    }\n    window.addEventListener(&#39;scroll&#39;, f)\n  }\n})\n\n// main app\nnew Vue({\n  el: &#39;#app&#39;,\n  methods: {\n    handleScroll: function (evt, el) {\n      if (window.scrollY &gt; 50) {\n        TweenMax.to(el, 1.5, {\n          y: -10,\n          opacity: 1,\n          ease: Sine.easeOut\n        })\n      }\n      return window.scrollY &gt; 100\n    }\n  }\n})</code></pre><p>Meskipun kita akan menghapus CSS transisi sebelumnya dari impplementasi ini karena sekarang sudah ditangani oleh&nbsp;<em>JavaScript</em></p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/creating-custom-scroll-directives.html#Manfaat-Menggunakan-Custom-Directives\">Manfaat Menggunakan&nbsp;<em>Custom Directives</em></a></h2><p>Vue kaya akan pilihan untuk&nbsp;<em>directives</em>, sebagian besar mencakup kasus penggunaan yang sangat umum, yang dapat mencipatakan pengalaman pengembang yang sangat produktif. Tetapi jika kamu memiliki&nbsp;<em>edge case</em> yang tidak tercakup pada&nbsp;<em>framework</em>, Vue dapat mencakup dalam kasus ini juga, karena kamu dapat dengan mudah membuat&nbsp;<em>custom directive</em> yang sesuai dengan kebutuhan kamu.</p><p>Menambahkan dan menghapus&nbsp;<em>scroll event</em> ke elemen adalah kasus penggunaan yang sangat baik untuk teknik ini, karena sama seperti&nbsp;<em>directive</em> yang kita pakai, mereka harus dipasangkan ke elemen dan sebaliknya, kita harus menemukan refrensi untuk di DOM. Pola ini menghindari&nbsp;<em>DOM traversal</em>, dan membuat logika&nbsp;<em>event</em> dipasangkan dengan&nbsp;<em>node</em> yamg mengacu padanya.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/creating-custom-scroll-directives.html#Contoh-Dunia-Nyata-Menggunakan-Custom-Scroll-Directive-Untuk-Animasi-Cascading\">Contoh Dunia Nyata: Menggunakan Custom Scroll Directive Untuk Animasi Cascading</a></h2><p>Dalam rangka membuat situs yang kohesif, kamu mungkin menemukan bahwa kamu menggunakan kembali tipe animasi dan logika yang sama dibeberapa tempat. Itu terlihat simpel, kita akan membuat&nbsp;<em>custom directive</em> yang sangat spesifi, benar? Biasanya, jika kau menggunakan kembali, kamu harus mengubahnya&nbsp;<em>sedikit</em> untuk setiap penggunaan.</p><p>Untuk membantu kode kita tetap ringkas dan mudah untuk dibaca, kta akan memberikan beberapa argumen yang sudah ditentukan sebelumnya, seperti titik awal dan akhir dari animasi saat kita melakukan&nbsp;<em>scroll</em> ke bawah.</p><p><strong>Contoh ini lebih baik dilihat dalam&nbsp;<a href=\"https://s.codepen.io/sdras/debug/078c19f5b3ed7f7d28584da450296cd0\">versi layar penuh</a>.</strong></p><p><br></p><p><iframe src=\"https://codepen.io/sdras/embed/c8c55e3e0bba997350551dd747119100?height=500&theme-id=5162&slug-hash=c8c55e3e0bba997350551dd747119100&default-tab=result&user=sdras&embed-version=2&pen-title=Scrolling%20Example-%20Using%20Custom%20Directives%20in%20Vue&name=cp_embed_2\"></iframe></p><p><br></p><p>Pada demo di atas, masing-masing bagian memiliki dua jenis animasi yang dipicu ketika&nbsp;<em>scroll</em>: perubahan animasi, dan animasi gambar yang menggerakkan beberapa&nbsp;<em>path</em> di SVG. Kita menggunakan kembali kedua animasi tersebut, sehingga kita dapat membuat&nbsp;<em>custom directive</em> masing-masing. Argumen yang kita masukkan akan membantu menjaga semuanya tetap simpel dan dapat digunakan kembali.</p><p>Untuk menunjukka bagaimana kita melakukan ini, kita akan meliha pada contoh perubahan bentuk, di mana kita akan membutuhkan&nbsp;<em>state</em> mulai dan akhir, serta memberikan nilai pada&nbsp;<em>path</em> yang akan kita ubah. Argumen ini masing-masing didefiniskan sebagai&nbsp;<code>binding.value.foo</code>:</p><pre><code>Vue.directive(&#39;clipscroll&#39;, {\n  inserted: function (el, binding) {\n    let f = function (evt) {\n      var hasRun = false\n      if (!hasRun &amp;&amp; window.scrollY &gt; binding.value.start) {\n        hasRun = true\n        TweenMax.to(el, 2, {\n          morphSVG: binding.value.toPath,\n          ease: Sine.easeIn\n        })\n      }\n      if (window.scrollY &gt; binding.value.end) {\n        window.removeEventListener(&#39;scroll&#39;, f)\n      }\n    }\n    window.addEventListener(&#39;scroll&#39;, f)\n  }\n})</code></pre><p>Kita kemudian dapat menggunakan animasi pada&nbsp;<em>template</em>, pada kasus ini kita menambahkan&nbsp;<em>directive</em> pada&nbsp;<code>clipPath</code> <em>element</em>, dan memasukkan semua argumen ke&nbsp;<em>directives</em> dalam objek.</p><pre><code>&lt;clipPath id=&quot;clip-path&quot;&gt;\n  &lt;path\n    v-clipscroll=&quot;{ start: &#39;50&#39;, end: &#39;100&#39;, toPath: &#39;M0.39 0.34H15.99V22.44H0.39z&#39; }&quot;\n    id=&quot;poly-shapemorph&quot;\n    d=&quot;M12.46 20.76L7.34 22.04 3.67 18.25 5.12 13.18 10.24 11.9 13.91 15.69 12.46 20.76z&quot;\n  /&gt;\n&lt;/clipPath&gt;</code></pre><h2><a href=\"https://docs.vuejs.id/v2/cookbook/creating-custom-scroll-directives.html#Pola-Alternatif\">Pola Alternatif</a></h2><p><em>Custom directives</em> sangatlah berguna, tetapi kamu akan menemukan situasi dimana kamu mebutuhkan sesuatu yang sangat sepesifik yang sudah ada pada&nbsp;<em>scrolling libraries</em> sehingga kamu tidak perlu lagi untuk membuatnya dari awal.</p><p><a href=\"http://scrollmagic.io/\">Scrollmagic</a> memiliki ekosistem yang sangat kaya untuk digunakan, serta dokumentasi yang bagus dan demo yang baik untuk dijelajahi. Ini termasuk, tetapi tidah terbatas pada hal-hal seperti&nbsp;<a href=\"http://scrollmagic.io/examples/advanced/parallax_scrolling.html\"><em>parallax</em></a>,&nbsp;<a href=\"http://scrollmagic.io/examples/expert/cascading_pins.html\"><em>cascading pinning</em></a>,&nbsp;<a href=\"http://scrollmagic.io/examples/basic/section_wipes_natural.html\"><em>section wipes</em></a>, dan&nbsp;<a href=\"http://scrollmagic.io/examples/basic/responsive_duration.html\"><em>responsive duration</em></a>.</p>"
      },
      {
        "title": "Menggunakan Axios untuk Mengkonsumsi API",
        "slug": "menggunakan-axios-untuk-mengkonsumsi-api",
        "img": "https://www.petanikode.com/img/vuejs/vuejs.png",
        "category": "Vue",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Seringkali ketika membangun aplikasi untuk web, Anda mungkin ingin menggunakan dan menampilkan data dari sebuah API. Ada beberapa cara untuk melakukannya, namun pendekatan yang sangat populer adalah dengan menggunakan&nbsp;<a href=\"https://github.com/axios/axios\">axios</a>, sebuah&nbsp;<em>HTTP client</em> berbasis&nbsp;<em>promise</em>.</p><p>Dalam latihan ini, kita akan menggunakan&nbsp;<a href=\"https://www.coindesk.com/api/\">CoinDesk API</a> untuk menampilkan harga Bitcoin, yang diperbarui setiap menit. Pertama, kita akan pasang axios dengan npm/yarn atau melalui tautan CDN.</p><p>Kita dapat melakukan permintaan informasi dari API dengan beberapa cara, namun sebaiknya kita pahami dulu format data nya, agar kita mengetahui apa yang akan ditampilkan. Untuk melakukan nya, kita akan melakukan panggilan ke API dan menampilkannya sehingga kita dapat melihatnya. Kita dapat melihat pada dokumentasi CoinDesk API, panggilan ini akan dilakukan ke&nbsp;<code>https://api.coindesk.com/v1/bpi/currentprice.json</code>. Jadi, pertama, kita akan membuat sebuah properti data yang pada akhirnya akan menyimpan informasi kita, dan kita akan mengambil data dan menetapkannya menggunakan kait siklus hidup&nbsp;<code>mounted</code>:</p><pre><code>new Vue({\n  el: &#39;#app&#39;,\n  data () {\n    return {\n      info: null\n    }\n  },\n  mounted () {\n    axios\n      .get(&#39;https://api.coindesk.com/v1/bpi/currentprice.json&#39;)\n      .then(response =&gt; (this.info = response))\n  }\n})</code></pre><pre><code>&lt;div id=&quot;app&quot;&gt;\n  {{ info }}\n&lt;/div&gt;</code></pre><p>Dan kita mendapatkan seperti berikut:</p><p><br></p><p><iframe src=\"https://codepen.io/Vue/embed/80043dfdb7b90f138f5585ade1a5286f?height=350&theme-id=32763&slug-hash=80043dfdb7b90f138f5585ade1a5286f&default-tab=result&user=Vue&embed-version=2&pen-title=First%20Step%20Axios%20and%20Vue&name=cp_embed_1\"></iframe></p><p><br></p><p>Luar biasa! Kita sudah mendapatkan beberapa data. Namun saat ini data tersebut terlihat berantakan, jadi mari kita tampilkan dengan benar dan kita tambahkan beberapa penanganan kesalahan/galat jika sesuatu tidak berjalan sesuai yang diharapkan atau memerlukan waktu lebih lama dari yang kita pikirkan untuk mendapatkan informasi tersebut.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Contoh-Dunia-Nyata-Bekerja-dengan-Data\">Contoh Dunia Nyata: Bekerja dengan Data</a></h2><h3><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Menampilkan-Data-dari-API\">Menampilkan Data dari API</a></h3><p>Pada umumnya informasi yang kita perlukan berada dalam respon, dan kita harus menelusuri apa yang baru saja kita simpan untuk dapat mengaksesnya dengan benar. Dalam kasus kita, kita dapat melihat bahwa informasi harga yang kita perlukan ada di <code>response.data.bpi</code>. Jika kita menggunakan ini, kita menampilkan sebagai berikut:</p><pre><code>axios\n  .get(&#39;https://api.coindesk.com/v1/bpi/currentprice.json&#39;)\nÂ  .then(response =&gt; (this.info = response.data.bpi))</code></pre><p>Ini jauh lebih mudah bagi kita untuk menampilkannya, jadi sekarang kita dapat melakukan pembaruan HTML kita agar hanya menampilkan informasi yang kita butuhkan dari data yang kita terima, dan kita akan membuat <a href=\"https://docs.vuejs.id/v2/api/#Vue-filter\">filter</a> untuk memastikan bahwa nilai desimal juga tepat.</p><pre><code>&lt;div id=&quot;app&quot;&gt;\n  &lt;h1&gt;Bitcoin Price Index&lt;/h1&gt;\n  &lt;div\n    v-for=&quot;currency in info&quot;\n    class=&quot;currency&quot;\n  &gt;\n    {{ currency.description }}:\n    &lt;span class=&quot;lighten&quot;&gt;\n      &lt;span v-html=&quot;currency.symbol&quot;&gt;&lt;/span&gt;{{ currency.rate_float | currencydecimal }}\n    &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><pre><code>filters: {\n  currencydecimal (value) {\n    return value.toFixed(2)\n  }\n},</code></pre><h3><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Berurusan-dengan-Galat\">Berurusan dengan Galat</a></h3><p>Terkadang kita mungkin tidak mendapatkan data yang kita inginkan dari API. Ada beberapa alasan mengapa panggilan menggunakan axios gagal, termasuk namun tidak terbatas pada:</p><ul><li>API tidak berfungsi.</li><li>Permintaan dibuat dengan tidak benar.</li><li>API tidak memberikan kita informasi dengan format yang kita antisipasi.</li></ul><p>Ketika membuat permintaan, kita harus memeriksa kondisi seperti itu, dan memberi diri kita informasi pada setiap kasus sehingga kita tahu cara menangani masalah tersebut. Dalam panggilan axios, kita akan melakukannya dengan&nbsp;<code>catch</code>.</p><pre><code>axios\n  .get(&#39;https://api.coindesk.com/v1/bpi/currentprice.json&#39;)\n  .then(response =&gt; (this.info = response.data.bpi))\n  .catch(error =&gt; console.log(error))</code></pre><p>Ini akan memberi tahu kita jika sesuatu gagal selama permintaan API, namun bagaimana jika datanya rusak atau API tidak berfungsi? Sekarang pengguna tidak akan melihat apa-apa. Kita mungkin ingin membuat&nbsp;<em>loader</em> untuk kasus ini, kemudian memberi tahu pengguna bahwa kita tidak dapat mendapatkan data sama sekali.</p><pre><code>new Vue({\n  el: &#39;#app&#39;,\n  data () {\n    return {\n      info: null,\n      loading: true,\n      errored: false\n    }\n  },\n  filters: {\n    currencydecimal (value) {\n      return value.toFixed(2)\n    }\n  },\n  mounted () {\n    axios\n      .get(&#39;https://api.coindesk.com/v1/bpi/currentprice.json&#39;)\n      .then(response =&gt; {\n        this.info = response.data.bpi\n      })\n      .catch(error =&gt; {\n        console.log(error)\n        this.errored = true\n      })\n      .finally(() =&gt; this.loading = false)\n  }\n})</code></pre><pre><code>&lt;div id=&quot;app&quot;&gt;\n  &lt;h1&gt;Bitcoin Price Index&lt;/h1&gt;\n\n  &lt;section v-if=&quot;errored&quot;&gt;\n    &lt;p&gt;We&#39;re sorry, we&#39;re not able to retrieve this information at the moment, please try back later&lt;/p&gt;\n  &lt;/section&gt;\n\n  &lt;section v-else&gt;\n    &lt;div v-if=&quot;loading&quot;&gt;Loading...&lt;/div&gt;\n\n    &lt;div\n      v-else\n      v-for=&quot;currency in info&quot;\n      class=&quot;currency&quot;\n    &gt;\n      {{ currency.description }}:\n      &lt;span class=&quot;lighten&quot;&gt;\n        &lt;span v-html=&quot;currency.symbol&quot;&gt;&lt;/span&gt;{{ currency.rate_float | currencydecimal }}\n      &lt;/span&gt;\n    &lt;/div&gt;\n\n  &lt;/section&gt;\n&lt;/div&gt;</code></pre><p>Anda dapat menekan tombol <em>re-run</em> pada <em>pen</em> ini untuk melihat status memuat secara singkat sambil kita mengumpulkan data dari API.</p><p>Ini bahkan dapat lebih ditingkatkan dengan penggunaan komponen untuk bagian-bagian yang berbeda dan pelaporan kesalahan/galat yang lebih jelas, tergantung pada API yang Anda gunakan dan kompleksitas aplikasi Anda.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Pola-Alternatif\">Pola Alternatif</a></h2><h3><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Fetch-API\">Fetch API</a></h3><p><a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\">Fetch API</a> adalah API&nbsp;<em>native</em> yang bagus untuk jenis permintaan ini. Anda mungkin pernah mendengar bahwa salah satu keuntungan dari Fetch API adalah tidak perlu memuat pustaka tambahan untuk menggunakannya, dan itu benar! Tetapi&hellip; Fetch API belum di dukung secara penuh, jadi Anda tetap akan perlu menggunakan polyfill. Ada beberapa penghambat/rintangan saat bekerja dengan API ini, itulah sebabnya banyak orang lebih suka menggunakan axios untuk saat ini. Namun hal ini sangat mungkin untuk berubah di masa depan.</p><p>Jika anda tertarik menggunakan Fetch API, ada beberapa&nbsp;<a href=\"https://scotch.io/@bedakb/lets-build-type-ahead-component-with-vuejs-2-and-fetch-api\">artikel bagus</a> yang menjelaskan cara menggunakannya.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/using-axios-to-consume-apis.html#Ringkasan\">Ringkasan</a></h2><p>Ada banyak cara untuk bekerja dengan Vue dan axios selain mengkonsumsi dan menampilkan API. Anda juga dapat berkomunikasi dengan&nbsp;<em>Serverless Functions</em>, memposting/mengedit/menghapus dari API dimana Anda memiliki hak akses tulis, dan masih banyak lagi manfaatnya. Karena integrasi yang mudah dari kedua pustaka ini, menjadikannya pilihan yang sangat umum bagi pengembang yang memerlukan integrasi&nbsp;<em>HTTP clients</em> ke dalam alur kerja mereka.</p>"
      },
      {
        "title": "Dockerize Aplikasi Vue.js App",
        "slug": "dockerize-aplikasi-vuejs-app",
        "img": "https://www.petanikode.com/img/vuejs/vuejs.png",
        "category": "Vue",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Jadi, Anda membangun aplikasi Vue.js pertama Anda menggunakan&nbsp;<a href=\"https://github.com/vuejs-templates/webpack\">templat&nbsp;<em>webpack</em> Vue.js</a> yang menakjubkan dan kini sangat ingin menunjukkannya pada teman-teman Anda dengan sebuah mendemonstrasi yang mana bisa Anda jalankan juga pada sebuah wadah&nbsp;<em>Docker</em>.</p><p>Mari mulai dengan membuat sebuah<code>Dockerfile</code> di folder dasar proyek kita:</p><pre><code>FROM node:lts-alpine\n\n# pasang (install) server http sederhana untuk menjalankan static content\nRUN npm install -g http-server\n\n# buat folder &#39;app&#39; pada direktori yang sedang dikerjakan\nWORKDIR /app\n\n# salin &#39;package.json&#39; dan &#39;package-lock.json&#39; (jika ada)\nCOPY package*.json ./\n\n# pasang dependecy proyek\nRUN npm install\n\n# salin berkas-berkas proyek serta folder-foldernya ke direktori yang sedang dikerjakan (misal. folder &#39;app)\nCOPY . .\n\n# bangun aplikasi untuk produksi dengan minifikasi\nRUN npm run build\n\nEXPOSE 8080\nCMD [ &quot;http-server&quot;, &quot;dist&quot; ]</code></pre><p>Awalnya mungkin terlihat berlebihan untuk menyalin&nbsp;<code>package.json</code> dan&nbsp;<code>package-lock.json</code> serta seluruh berkas proyek dalam dua langkah terpisah, tetapi sebenarnya ada sebuah<a href=\"http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/\">alasan baik di baliknya</a> (<em>spoiler</em>: hal tersebut mengizinkan kita untuk memanfaatkan lapisan-lapisan Docker dengan&nbsp;<em>cache</em>).</p><p>Sekarang ayo buat tampilan&nbsp;<em>Docker</em> untuk aplikasi Vue.js kita:</p><pre><code>docker build -t vuejs-cookbook/dockerize-vuejs-app .</code></pre><p>Akhirnya, saatnya jalankan aplikasi Vue.js kita di sebuah wadah&nbsp;<em>Docker</em>:</p><pre><code>docker run -it -p 8080:8080 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</code></pre><p>Kita seharusnya dapat mengakses aplikasi Vue.js kita di&nbsp;<code>localhost:8080</code>.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Contoh-Dunia-Nyata\">Contoh Dunia Nyata</a></h2><p>Pada contoh sebelumnya, kita menggunakan sebuah&nbsp;<em>command-line</em> <a href=\"https://github.com/indexzero/http-server\">http server</a> yang sederhana dan tanpa konfigurasi tertentu untuk menjalankan aplikasi Vue.js kita - yang mana sangat cocok untuk&nbsp;<em>prototyping</em> cepat dan&nbsp;<em>bisa jadi</em> baik untuk skenario produksi-produksi sederhana. Lagipula, dokumentasinya mengatakan demikian:</p><blockquote><p>Hal tersebut cukup baik untuk penggunaan dalam hal produksi, tapi juga cukup sederhana dan mudah diretas untuk pengujian, pengembangan lokal, serta pembelajaran.</p></blockquote><p>Meskipun demikian, untuk kasus-kasus produksi yang kompleks secara nyata, akan lebih bijak untuk mengandalkan beberapa nama besar seperti&nbsp;<a href=\"https://www.nginx.com/\"><em>NGINX</em></a> atau&nbsp;<a href=\"https://httpd.apache.org/\"><em>Apache</em></a> dan itulah hal yang akan kita lakukan selanjutnya: kita akan we are about memanfaatkan&nbsp;<em>NGINX</em> untuk menjalankan aplikasi Vue.js kita karena hal tersebut dipertimbangkan sebagai salah satu solusi dan pihak yang telah teruji dengan sangat baik.</p><p>Mari me-<em>refactor</em> <code>Dockerfile</code> kita untuk menggunakan&nbsp;<em>NGINX</em>:</p><pre><code># tahap pengembangan\nFROM node:lts-alpine as build-stage\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# tahap produksi\nFROM nginx:stable-alpine as production-stage\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre><p>Baik, mari kita lihat apa yang terjadi kini:</p><ul><li>kita sudah memisahkan&nbsp;<code>Dockerfile</code> asli milik kita ke dalam beberapa tahapan dengan memanfaatkan fitur&nbsp;<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\">pengembangan&nbsp;<em>multi-stage</em></a> Docker;</li><li>tahap pertama bertujuan untuk mengembangkan sebuah&nbsp;<em>artefak</em> yang siap prduksi dari aplikasi Vue.js kita;</li><li>tahap kedua bertujuan untuk menjalankan&nbsp;<em>artefak</em> tersebut mengguankan&nbsp;<em>NGINX</em>.</li></ul><p>Kini ayo bangun tampilan&nbsp;<em>Docker</em> dari aplikasi Vue.js kita:</p><pre><code>docker build -t vuejs-cookbook/dockerize-vuejs-app .</code></pre><p>Pada akhirnya, jalankan aplikasi Vue.js kita dalam wadah&nbsp;<em>Docker</em>:</p><pre><code>docker run -it -p 8080:80 --rm --name dockerize-vuejs-app-1 vuejs-cookbook/dockerize-vuejs-app</code></pre><p>Kita seharusnya bisa mengakses aplikasi Vue.js kita di&nbsp;<code>localhost:8080</code>.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Konteks-Tambahan\">Konteks Tambahan</a></h2><p>Jika Anda membaca&nbsp;<em>cookbook</em> ini, ada kemungkinan Anda sudah tahu alasan mengapa Anda memilih untuk men-<em>dockerize</em> aplikasi Vue.js Anda. Tetapi jika Anda hanya tiba di laman ini tanpa alasan spesifik seperti di atas, izinkan kami bagikan pada Anda beberapa alasan baik mengapa membaca&nbsp;<em>cookbook</em> ini bermanfaat.</p><p>Tren modern kini adalah membangun aplikasi menggunakan pendekatan&nbsp;<a href=\"https://pivotal.io/cloud-native\"><em>Cloud-Native</em></a> yang mana merevolusi terutama pada hal-hal berikut:</p><ul><li><em>Microservice</em></li><li><em>DevOps</em> (<em>Development and Operations</em>/ Pengembangan dan Operasi)</li><li><em>Delivery</em> secara kontinyu</li></ul><p>Mari lihat bagaimana konsep-konsep ini sebenarnya mempengaruhi keputusan kita dalam hal proses&nbsp;<em>dockerize</em> aplikasi Vue.js kita.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Efek-Microservice\">Efek&nbsp;<em>Microservice</em></a></h3><p>Dengan mengadopsi&nbsp;<a href=\"https://martinfowler.com/microservices/\">gaya arsitektural&nbsp;<em>microservice</em></a>, kita berakhir pada membangun sebuah aplikasi tunggal sebagai sebuah rangkaian layanan-layanan (<em>service</em>) kecil, tiap layanannya berjalan pada prosesnya sendiri dan berkomunikasi dengan mekanisme yang ringan. Layanan ini dibangun di sekitar kapabilitas bisnis dan secara independen dapat diluncurkan oleh mesin peluncuran (<em>deployment</em>) yang sepenuhnya otomatis.</p><p>Jadi, memutuskan untuk menerapkan pendekatan arsitektural ini sering kali berdampak pada pengembangan dan peluncuran&nbsp;<em>front-end</em> kita sebagai sebuah layanan yang independen.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Efek-DevOps\">Efek&nbsp;<em>DevOps</em></a></h3><p>Mengadopsi kultur&nbsp;<a href=\"https://martinfowler.com/bliki/DevOpsCulture.html\"><em>DevOps</em></a>, perlengkapan serta praktik-praktik teknis yang tangkas (<em>agile</em>), di antara hal lain, telah memiliki dampak baik pada meningkatnya kolaborasi antara peran-peran dalam pengembangan dan operasi (<em>development and operations</em>). Masalah utama di masa lalu (tapi juga hingga hari ini pada beberapa kasus) adalah tim pengembang cenderung tidak tertarik dalam hal operasi dan pemeliharaan (<em>maintenance</em>) sistem selepas produk sudah dipindahtangankan pada tim operasi, ketika tim yang terakhir cenderung tidak begitu sadar akan tujuan bisnis sistem ini serta, oleh karenanya, dengan berat hati berusaha memuaskan kebutuhan operasional sistem (juga disebut-sebut sebagai &ldquo;ke-pengecut-an pengembang&rdquo;).</p><p>Jadi, menyerahkan aplikasi Vue.js sebagai sebuah tampilan Docker membantu mengurangi -jika tidak menghilangkan seluruhnya- perbedaan antara menjalankan layanan di laptop pengembang, lingkungan pengembangan atau lingkungan apapun yang kita pikirkan.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Efek-Delivery-secara-Kontinyu\">Efek&nbsp;<em>Delivery</em> secara Kontinyu</a></h3><p>Dengan memanfaatkan&nbsp;<a href=\"https://martinfowler.com/bliki/ContinuousDelivery.html\"><em>delivery</em> secara kontinyu</a> secara teratur kita membangun perangkat lunak dengan cara yng mana bisa dirilis kapan pun secara potensial. Praktik teknis demikian diperbolehkan agar&nbsp;<a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\"><em>delivery pipeline</em> berjalan secara kontinyu</a>. Tujuan&nbsp;<em>delivery pipeline</em> secara kontinyu ini untuk membagi pengembangan menjadi beberapa tahap (misal, kompilasi, uji unit, uji integrasi, uji performa, dsb.) dan memperbolehkan tiap tahap memverifikasi artefak pengembangan kita kapanpun perangkat lunak kita berubah. Pada akhirnya, tiap tahap meningkatkan kepercayaan diri kita dalam hal kesiapan produksi pada artifak yang kita kembangkan, oleh karenanya, mengurangi resiko rusaknya beberapa hal dalam tahapan produksi (atau lingkungan lain yang penting).</p><p>Jadi, membuat tampilan&nbsp;<em>Docker</em> aplikasi Vue.js adalah pilihan yang baik di sini karena hal tersebut akan merepresentasikan hasil akhir pengembangan artefak kita, barang yang sama yang akan diverifikasi dengan&nbsp;<em>delivery pipeline</em> kotinyu kita serta secara potensial dapat dirilis ke tahap produksi dengan yakin.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/dockerize-vuejs-app.html#Pola-pola-Alternatif\">Pola-pola Alternatif</a></h2><p>Jika perusahaan Anda sekarang belum mengadopsi&nbsp;<em>Docker</em> dan/atau&nbsp;<em>Kubernetes</em> atau Anda hanya ingin meningkatkan kapabilitas diri Anda jadi yang terbaik, mungkin saja me-<em>dockerize</em> aplikasi Vue.js bukanlah hal yang Anda butuhkan.</p><p>Alternatif-alternatif umum lainnya:</p><ul><li>memanfaatkan sebuah&nbsp;<em>platform</em> yang&nbsp;<em>all-in-one</em> seperti&nbsp;<a href=\"https://www.netlify.com/\"><em>Netlify</em></a>;</li><li>men-<em>hosting</em> <em>SPA</em> Anda di&nbsp;<a href=\"https://aws.amazon.com/s3/\"><em>Amazon S3</em></a> dan menjalankannya dengan&nbsp;<a href=\"https://aws.amazon.com/cloudfront/\"><em>Amazon CloudFront</em></a> (lihat&nbsp;<a href=\"https://serverless-stack.com/chapters/deploy-the-frontend.html\">tautan ini</a> untuk penduan lebih rinci).</li></ul>"
      },
      {
        "title": "Penggunaan praktis dari slot scoped dengan GoogleMaps",
        "slug": "penggunaan-praktis-dari-slot-scoped-dengan-googlemaps",
        "img": "https://www.petanikode.com/img/vuejs/vuejs.png",
        "category": "Vue",
        "created_at": "2021-07-05",
        "body": "<p id=\"isPasted\">Ada beberapa situasi ketika Anda menginginkan templat dalam slot untuk bisa mengakses data dari&nbsp;<em>child component</em> yang bertanggung jawab untuk menrender slot konten. Sebagian ini berguna ketika Anda membutuhkan kebebasan dalam membuat templat khusus yang menggunakan beberapa properti data&nbsp;<em>child component</em>. Kasus penggunaan umum untuk slot&nbsp;<em>scoped</em>.</p><p>Bayangkan sebuah komponen yang terkonfigurasi dan menyiapkan API eksternal untuk digunakan di komponen lain, tapi tidak tergabung erat dengan templat spesifik manapun. Seperti sebuah komponen dapat diguna-ulang dalam banyak tempat merender templat berbeda tapi menggunakan obyek dasar yang sama dengan API spesifik.</p><p>Kita akan membuat sebuah komponen (<code>GoogleMapLoader.vue</code>):</p><ol><li>Inisialisasi&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/reference/\">Google Maps API</a></li><li>Buat obyek&nbsp;<code>google</code> dan&nbsp;<code>map</code></li><li>Buka obyek tersebut untuk&nbsp;<em>parent component</em> yang menggunakan&nbsp;<code>GoogleMapLoader</code></li></ol><p>Di bawah adalah contoh bagaimana ini bisa dicapai. Kita akan menganalisis kode sepotong-sepotong dan melihat apa yang sebenarnya terjadi dalam seksi berikutnya.</p><p>Pertama-tama buat&nbsp;<code>GoogleMapLoader.vue</code> templat kita</p><pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;google-map&quot; ref=&quot;googleMap&quot;&gt;&lt;/div&gt;\n    &lt;template v-if=&quot;Boolean(this.google) &amp;&amp; Boolean(this.map)&quot;&gt;\n      &lt;slot\n        :google=&quot;google&quot;\n        :map=&quot;map&quot;\n      /&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre><p>Sekarang, kebutuhan skrip kita untuk mengoper beberapa props ke komponen yang mengizinkan kita untuk menetapkan&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/reference/\">Google Maps API</a> dan&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/reference/map#Map\">Map object</a>:</p><pre><code>import GoogleMapsApiLoader from &#39;google-maps-api-loader&#39;\n\nexport default {\n  props: {\n    mapConfig: Object,\n    apiKey: String,\n  },\n\n  data() {\n    return {\n      google: null,\n      map: null\n    }\n  },\n\n  async mounted() {\n    const googleMapApi = await GoogleMapsApiLoader({\n      apiKey: this.apiKey\n    })\n    this.google = googleMapApi\n    this.initializeMap()\n  },\n\n  methods: {\n    initializeMap() {\n      const mapContainer = this.$refs.googleMap\n      this.map = new this.google.maps.Map(\n        mapContainer, this.mapConfig\n      )\n    }\n  }\n}</code></pre><p>Ini hanyalah bagian dari contoh kerja, Anda dapat mencari seluruh contoh di Codesandbox di bawah.</p><p><iframe src=\"https://codesandbox.io/embed/1o45zvxk0q\"></iframe></p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#Contoh-Nyata-Membuat-sebuah-komponen-Pemuat-Google-Map\">Contoh Nyata: Membuat sebuah komponen Pemuat Google Map</a></h2><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#1-Buat-sebuah-komponen-yang-menginisialisasi-map-kita\">1. Buat sebuah komponen yang menginisialisasi map kita</a></h3><p><code>GoogleMapLoader.vue</code></p><p>Dalam templat, kita membuat sebuah kontainer untuk peta yang akan digunakan untuk memasang&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/reference/map#Map\">Map</a> obyek yang diekstraksi dari API Google Maps.</p><pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;google-map&quot; ref=&quot;googleMap&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre><p>Berikutnya, skrip kita butuh untuk menerima props dari&nbsp;<em>parent component</em> yang akan mengizinkan kita untuk menetapkan Google Map. Props tersebut terdiri dari:</p><ul><li><a href=\"https://developers.google.com/maps/documentation/javascript/reference/3/map#MapOptions\">mapConfig</a>:â€ŠObyek konfigurasi Google Maps</li><li><a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\">apiKey</a>:â€Š<em>Api key</em> personal kita dibutuhkan oleh Google Maps</li></ul><pre><code>import GoogleMapsApiLoader from &#39;google-maps-api-loader&#39;\n\nexport default {\n  props: {\n    mapConfig: Object,\n    apiKey: String,\n  },</code></pre><p>Lalu, kita menetapkan nilai inisial dari google dan map menjadi null:</p><pre><code>data() {\n  return {\n    google: null,\n    map: null\n  }\n},</code></pre><p>Dalam kait&nbsp;<code>mounted</code> kita&nbsp;<em>instantiate</em> sebuah&nbsp;<code>googleMapApi</code> dan obyek&nbsp;<code>Map</code> dari&nbsp;<code>GoogleMapsApi</code> dan kita menetapkan nilai dari&nbsp;<code>google</code> dan&nbsp;<code>map</code> untuk membuat&nbsp;<em>instance</em>:</p><pre><code>  async mounted() {\n    const googleMapApi = await GoogleMapsApiLoader({\n      apiKey: this.apiKey\n    })\n    this.google = googleMapApi\n    this.initializeMap()\n  },\n\n  methods: {\n    initializeMap() {\n      const mapContainer = this.$refs.googleMap\n      this.map = new this.google.maps.Map(mapContainer, this.mapConfig)\n    }\n  }\n}</code></pre><p>Sejauh ini bagus. Dengan semua yang telah selesai, kita bisa melanjutkan menambahkan ke obyek lain ke dalam peta (Marker,&nbsp;<em>Polyline</em>, dll.) dan gunakan sebagai komponen peta biasa.</p><p>Tapi, kita ingin menggunakan komponen&nbsp;<code>GoogleMapLoaded</code> kita saja sebagai pemuat yang menyiapkan peta &mdash; kita tidak ingin merender apapun didalamnya.</p><p>Untuk mencapai itu, kita perlu mengizinkan&nbsp;<em>parent component</em> yang akan menggunakan&nbsp;<code>GoogleMapLoader</code> kita untuk mengakses&nbsp;<code>this.google</code> dan&nbsp;<code>this.map</code> yang ditetapkan dalam komponen&nbsp;<code>GoogleMapLoader</code>. Itulah dimana&nbsp;<em><a href=\"https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots\">slot scoped</a></em> terlihat bersinar. Slot&nbsp;<em>scoped</em> mengizinkan kita untuk membuka pengaturan properti di sebuah&nbsp;<em>child component</em> ke&nbsp;<em>parent component</em>. Ini terdengar seperti permulaan, tapi bertahanlah beberapa menit untuk<br>kita urai lebih dalam.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#2-Membuat-komponen-yang-menggunakan-penginisialisasi-komponen-kita\">2. Membuat komponen yang menggunakan penginisialisasi komponen kita.</a></h3><p><code>TravelMap.vue</code></p><p>Dalam templat, kita merender komponen&nbsp;<code>GoogleMapLoader</code> dan mengoper props yang dibutuhkan untuk menginisialisasi peta.</p><pre><code>&lt;template&gt;\n  &lt;GoogleMapLoader\n    :mapConfig=&quot;mapConfig&quot;\n    apiKey=&quot;yourApiKey&quot;\n  /&gt;\n&lt;/template&gt;</code></pre><p>Tag skrip kita akan terlihat seperti ini:</p><pre><code>&lt;script&gt;\nimport GoogleMapLoader from &#39;./GoogleMapLoader&#39;\nimport { mapSettings } from &#39;@/constants/mapSettings&#39;\n\nexport default {\n  components: {\n    GoogleMapLoader\n  },\n\n  computed: {\n    mapConfig () {\n      return {\n        ...mapSettings,\n        center: { lat: 0, lng: 0 }\n      }\n    },\n  },\n}\n&lt;/script&gt;</code></pre><p>Masih tanpa slot&nbsp;<em>scoped</em>, jadi mari tambahkan satu.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#3-Membuka-properti-google-dan-map-ke-parent-component-dengan-menambahkan-slot-scoped\">3. Membuka properti&nbsp;<code>google</code> dan&nbsp;<code>map</code> ke&nbsp;<em>parent component</em> dengan menambahkan slot&nbsp;<em>scoped</em>.</a></h3><p>Akhirnya, kita akan menambahkan slot&nbsp;<em>scoped</em> yang akan melakukan pekerjaannya dan mengizinkan kita untuk mengakses props&nbsp;<em>child component</em> di&nbsp;<em>parent component</em>. Kita melakukannya dengan menambahkan tag&nbsp;<code>&lt;slot&gt;</code> dalam&nbsp;<em>child component</em> dan mengoper props yang kita inginkan untuk dibuka (menggunakan&nbsp;<em>directive</em> <code>v-bind</code> atau tulisan cepat&nbsp;<code>:propName</code>). Ini tidak berbeda dari mengoper props turuh ke&nbsp;<em>child component</em>, tapi dengan melakukan ini dalam tag&nbsp;<code>&lt;slot&gt;</code> akan membalikan arah<br>dari aliran data.</p><p><code>GoogleMapLoader.vue</code></p><pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;google-map&quot; ref=&quot;googleMap&quot;&gt;&lt;/div&gt;\n    &lt;template v-if=&quot;Boolean(this.google) &amp;&amp; Boolean(this.map)&quot;&gt;\n      &lt;slot\n        :google=&quot;google&quot;\n        :map=&quot;map&quot;\n      /&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre><p>Sekarang, ketika kita memiliki slot dalam&nbsp;<em>child component</em>, kita perlu menerima dan mengkonsumsi props yang dibuka di&nbsp;<em>parent component</em>.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#4-Menerima-props-yang-dibuka-di-parent-component-menggunakan-atribut-slot-scope\">4. Menerima props yang dibuka di&nbsp;<em>parent component</em> menggunakan atribut&nbsp;<code>slot-scope</code>.</a></h3><p>Untuk menerima props di&nbsp;<em>parent component</em>, kita mendeklarasikan sebuauh elemen templat dan menggunakan atribut&nbsp;<code>slot-scope</code>. Atribut ini memiliki akses ke obyek yang membawa semua props yang dibuka dari&nbsp;<em>child component</em>. Kita bisa mengambil seluruh obyek atau kita bisa&nbsp;<a href=\"https://vuejs.org/v2/guide/components-slots.html#Destructuring-slot-scope\">menghancurkan obyek tersebut</a> dan hanya apa yang kita butuhkan</p><p>Mari hancurkan benda ini untuk mendapatkan apa yang kita butuhkan.</p><p><code>TravelMap.vue</code></p><pre><code>&lt;GoogleMapLoader\n  :mapConfig=&quot;mapConfig&quot;\n  apiKey=&quot;yourApiKey&quot;\n&gt;\n  &lt;template slot-scope=&quot;{ google, map }&quot;&gt;\n  Â Â Â Â {{ map }}\n  Â Â Â Â {{ google }}\n  &lt;/template&gt;\n&lt;/GoogleMapLoader&gt;</code></pre><p>Meskipun props&nbsp;<code>google</code> dan&nbsp;<code>map</code> tidak ada di&nbsp;<em>scope</em> <code>TravelMap</code>, komponen masih memiliki akses ke props (props dari&nbsp;<code>google</code> dan&nbsp;<code>map</code>) dan kita dapat menggunakannya dalam templat.</p><p>Anda mungkin takjub mengapa kita mau melakukan hal seperti itu dan apa gunanya semua itu?</p><p>Slot&nbsp;<em>scoped</em> mengizinkan kita untuk mengoper templat ke slot sebagai ganti dari elemen yang telah dirender. Itu disebut slot&nbsp;<code>scoped</code> karena itu akan memiliki akses ke data&nbsp;<em>child component</em> tertentu meskipun templat telah dirender dalam&nbsp;<em>scope</em> <em>parent component</em>. Ini memberikan kita kebebasan untuk mengisi templat dengan konten khusu dari&nbsp;<em>parent component</em>.</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#5-Membuat-komponen-pabrik-dari-Marker-dan-Polyline\">5. Membuat komponen pabrik dari&nbsp;<em>Marker</em> dan&nbsp;<em>Polyline</em></a></h3><p>Sekarang ketika kita memiliki peta kita siap kita akan membuat 2 komponen pabrik yang akan digunakan untuk menambah elemen ke&nbsp;<code>TravelMap</code>.</p><p><code>GoogleMapMarker.vue</code></p><pre><code>import { POINT_MARKER_ICON_CONFIG } from &#39;@/constants/mapSettings&#39;\n\nexport default {\n  props: {\n    google: {\n      type: Object,\n      required: true\n    },\n    map: {\n      type: Object,\n      required: true\n    },\n    marker: {\n      type: Object,\n      required: true\n    }\n  },\n\n  mounted() {\n    new this.google.maps.Marker({\n      position: this.marker.position,\n      marker: this.marker,\n      map: this.map,\n      icon: POINT_MARKER_ICON_CONFIG\n    })\n  }\n}</code></pre><p><code>GoogleMapLine.vue</code></p><pre><code>import { LINE_PATH_CONFIG } from &#39;@/constants/mapSettings&#39;\n\nexport default {\n  props: {\n    google: {\n      type: Object,\n      required: true\n    },\n    map: {\n      type: Object,\n      required: true\n    },\n    path: {\n      type: Array,\n      required: true\n    }\n  },\n\n  mounted() {\n    new this.google.maps.Polyline({\n      path: this.path,\n      map: this.map,\n      ...LINE_PATH_CONFIG\n    })\n  }\n}</code></pre><p>Keduanya menerima&nbsp;<code>google</code> yang kita gunakan untuk mengekstraksi obyek yang dibutuhkan (<em>Marker</em> atau&nbsp;<em>Polyline</em>) sebaik&nbsp;<code>map</code> yang diberikan sebagai referensi ke peta di mana kita ingin menempatkan elemen kita.</p><p>Masing-masing komponen juga berekspektasi prop tambahan untuk membuat elemen yang sesuai. Dalam kasus ini, kita memiliki&nbsp;<code>marker</code> dan&nbsp;<code>path</code>, masing-masing.</p><p>Dalam kait yang terpasang, kita membuat sebuah elemen (<em>Marker</em>/<em>Polyline</em>) dan melampirkannya ke peta kita dengan mengoper properti&nbsp;<code>map</code> untuk konstruktor obyek.</p><p>Masih ada satu langkah lagi&hellip;</p><h3><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#6-Menambah-elemen-ke-peta\">6. Menambah elemen ke peta</a></h3><p>Mari gunakan komponen pabrik kita untuk menambah elemen ke peta kita. Kita harus merender komponen pabrik dan mengoper obyek&nbsp;<code>google</code> dan&nbsp;<code>peta</code> jadi aliran data menuju ke tempat yang tepat.</p><p>Kita juga perlu menyediakan data yang dibutuhkan oleh elemen itu sendiri. Dalam kasus kita adalah obyek&nbsp;<code>marker</code> dengan posisi dari marker dan obyek&nbsp;<code>path</code> dengan koordinat&nbsp;<em>Polyline</em>/</p><p>Kita mulai, mengintegrasi poin data langsung ke templat:</p><pre><code>&lt;GoogleMapLoader\n  :mapConfig=&quot;mapConfig&quot;\n  apiKey=&quot;yourApiKey&quot;\n&gt;\n  &lt;template slot-scope=&quot;{ google, map }&quot;&gt;\n    &lt;GoogleMapMarker\n      v-for=&quot;marker in markers&quot;\n      :key=&quot;marker.id&quot;\n      :marker=&quot;marker&quot;\n      :google=&quot;google&quot;\n      :map=&quot;map&quot;\n    /&gt;\n    &lt;GoogleMapLine\n      v-for=&quot;line in lines&quot;\n      :key=&quot;line.id&quot;\n      :path.sync=&quot;line.path&quot;\n      :google=&quot;google&quot;\n      :map=&quot;map&quot;\n    /&gt;\n  &lt;/template&gt;\n&lt;/GoogleMapLoader&gt;</code></pre><p>Kita perlu mengimpor komponen pabrik yang dibutuhkan di skrip kita dan menetapkan data yang akan dioper ke marker dan garis:</p><pre><code>import { mapSettings } from &#39;@/constants/mapSettings&#39;\n\nexport default {\n  components: {\n    GoogleMapLoader,\n    GoogleMapMarker,\n    GoogleMapLine\n  },\n\n  data () {\n    return {\n      markers: [\n      { id: &#39;a&#39;, position: { lat: 3, lng: 101 } },\n      { id: &#39;b&#39;, position: { lat: 5, lng: 99 } },\n      { id: &#39;c&#39;, position: { lat: 6, lng: 97 } },\n      ],\n      lines: [\n        { id: &#39;1&#39;, path: [{ lat: 3, lng: 101 }, { lat: 5, lng: 99 }] },\n        { id: &#39;2&#39;, path: [{ lat: 5, lng: 99 }, { lat: 6, lng: 97 }] }\n      ],\n    }\n  },\n\n  computed: {\n    mapConfig () {\n      return {\n        ...mapSettings,\n        center: this.mapCenter\n      }\n    },\n\n    mapCenter () {\n      return this.markers[1].position\n    }\n  },\n}</code></pre><h2><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#Kapan-Untuk-Menghindari-Pola-Ini\">Kapan Untuk Menghindari Pola Ini</a></h2><p>Ini mungkin menggoda untuk membuat solusi yang sangat kompleks berdasarkan contoh, tapi dalam beberapa poin kita dapat sampai pada situasi dimana abstraksi ini menjadi bagian yang mandiri dari kode yang berada dalam basis kode.</p><h2><a href=\"https://docs.vuejs.id/v2/cookbook/practical-use-of-scoped-slots.html#Kesimpulan\">Kesimpulan</a></h2><p>Jadi itu saja. Dengan semua bit-bit itu dan bagian-bagian yang telah dibuat sekarang kita dapat menguna-ulang komponen&nbsp;<code>GoogleMapLoader</code> sebagai dasar untuk semua peta kita dengan mengoper tempat berbeda ke masing-masing templat tersebut. Bayangkan Anda perlu membuat peta lain dengan Marker yang berbeda atau hanya Marker tanpa&nbsp;<em>Polyline</em>. Dengan menggunakan pola di atas itu menjadi sangat mudah seperti kita hanya perlu mengoper konten yang berbeda ke komponen&nbsp;<code>GoogleMapLoader</code>.</p><p>Pola ini tidak ketat terkoneksi ke&nbsp;<em>Google Maps</em>; ini dapat digunakan dengan pustaka apapun untuk menetapkan dasar komponen dan membuka pustaka API yang mungkin digunakan dalam komponen yang dipanggil komponen dasar.</p>"
      },
      {
        "title": "Apa itu static site generator",
        "slug": "apa-itu-static-site-generator",
        "img": "https://i.ibb.co/ByLSFwp/ssg.jpg",
        "category": "SSG",
        "created_at": "2021-06-25",
        "body": "<p>Ada banyak jalan untuk sampai ke Roma, begitu juga dengan membuat website, ada banyak cara untuk melakukannya. Salah satu tren saat ini adalah membuat website dengan static site generator atau yang dikenal dengan SSG.</p><p>Static Site Generator adalah tool yang akan membantu kita mengubah website yang dibangun menjadi file file statis HTML, CSS dan Javascript untuk dikonsumsi oleh penggunanya&nbsp; nanti.</p><h2>Apa itu static site generator</h2><p>Kalau diartikan langsung, SSG bisa disebut &quot;penghasil website statis&quot;. Pada dasarnya SSG adalah istilah umum untuk sebuah alat atau software yang bisa menghasilkan halaman statis.</p><p>Apa sih halaman statis? halaman statis adalah halaman yang terbuat dari tiga teknologi andalan web developer yaitu.. HTML, CSS dan javascript (pilihan), di mana tidak ada backend ataupun database yang terlibat langsung di sini.</p><h2>Apa manfaat website statis</h2><p>Hal yang wajar ditanyakan, apa sih manfaat dari membuat website dengan SSG ini? terutama dengan berabagai macam pilihan bahasa program saat ini.</p><p><strong>Lebih Cepat</strong></p><p>Dengan menggunakan website statis saja, artinya kita tidak lagi melakukan &quot;request&quot; ke backend, karena hanya memanggil halaman itu saja. Coba bandingkan saat kamu membuat satu file index.html dan website lain dengan konten yang sama yang menggunakan bahasa backend tertentu, tentu website yang dibuat dengan index.html saja bisa berjalan lebih cepat.</p><p><strong>Lebih Aman</strong></p><p>Karena tidak banyak kode yang berhubungan dengan data atau backend, maka ada banyak celah keamanan yang secara automatis terpangkas alias membuat website kamu lebih aman.</p><p><strong>Hosting Gratis</strong></p><p>Mempublish website dinamis lebih sulit dibanding website dinamis. Penyedia hosting statis yang gratis pun lebih banyak. Nah keuntungan untuk kamu yang memilih SSG, kamu justru akan bingung (bingung yang baik) dengan banyaknya pilihan hosting halaman statis gratis untuk kamu nanti.</p><h2>Website seperti apa yang cocok menggunakan SSG?</h2><p>Website yang bersifat <strong>tidak memiliki&nbsp;</strong>&quot;user generated content&quot; alias konten yang tidak dibuat oleh user penggunanya. Sebagai contoh website forum, punya banyak pertanyaan yang dibuat oleh user. Meskipun kalau mau &quot;memaksakan&quot; pasti akan ada jalan, tapi sifat dasar dari website ssg ini tidak cocok untuk itu.</p><p>Jadi selain dari hal tersebut seperti website pribadi, membuat blog, profil perusahaan, cocok cocok saja.</p><h2>Apa teknologi dibalik SSG?</h2><p>Kita biasanya perlu menginstall program untuk menjalankan SSG ini. Di balik layar, SSG biasanya membaca file markdown yang kita buat dan menjadikannya sebuah halaman HTML dan CSS.</p><p>Tenang saja kalau kamu kepikiran, seperti berarti saya harus selalu membuat header? footer? dan hal fix lainnya dong berkali-kali. Tenang, tidak perlu ko&#39; . Dengan SSG kita seperti membuat website dinamis sendiri. Kita menentukan template yang mau dipakai, tentu bisa kamu buat sendiri, sisanya kamu hanya perlu menambahkan kontennya.</p><p>Ada banyak &quot;apps&quot; yang menawarkan SSG termasuk dari berbagai macam bahasa dan framework. Kabar baiknya alurnya semua hampir sama, kita tidak perlu mempelajari bahasa tersebut untuk bisa mulai menggunakan SSG. Cukup dengan membaca panduan dokumentasinya. Yang normalnya hanya perlu membuat atau memilih template dan sudah bisa mulai membuat halamannya.</p><h2>Apa saja pilihan static site generator</h2><p>Cukup banyak, ada hugo, nuxtjs, nextjs, vuepress, gatsby, gridsome, jigsaw dan masih banyak lagi.</p><p>Orang biasanya memilih berdasarkan bahasa atau framework apa yang selama ini dia gunakan. Dimana nanti akan sangat membantu dalam mengembangkan websitenya.</p><h2>Kekurangan static site generator</h2><p>Diperlukan setup awal, normalnya teman-teman yang sebelumnya belum terbiasa dengan command prompt/ terminal akan merasa aneh, apalagi kalau malas membaca dokumentasi.</p><p>Untuk setiap penambahan halamannya pun akan butuh sedikit waktu lebih dibanding dengan website dinamis. Karena memerlukan &quot;build&quot; time dimana program akan melihat jika ada perubaha sedikitpun di halaman masing-masing dan membuat halamannya.</p><h2>Melengkapi Static Site Generator kamu</h2><p>Ada beberapa fitur yang kamu mungkin perlu memikirkan dua kali untuk menggunakan SSG ini. Tapi pelan-pelan sudah banyak produk yang mengatasi masalahnya.</p><p>Seperti</p><p><strong>membuat komentar</strong> kamu bisa menggunakan:</p><ul><li>disqus</li><li>commento</li><li>hyvor</li><li>talkyard</li><li>dll..</li></ul><p>menerima <strong>submisi form</strong> dengan:</p><ul><li>formspree</li><li>google form</li><li>formkeep</li></ul><p>melakukan autentikasi user:</p><ul><li>netlify go-true</li><li>Auth0</li></ul>"
      },
      {
        "title": "Deploy aplikasi Next.js kamu ke Forge.",
        "slug": "deploy-aplikasi-nextjs-kamu-ke-forge",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/zJ8yJ6nFN2qsDhxvN0MeX7VBicXEvfzSldZ9Dkqg.png",
        "category": "Forge",
        "created_at": "2021-06-24",
        "body": "<p>Next.js adalah kerangka kerja React yang dikembangkan oleh Vercel. Ini mencakup fungsionalitas seperti rendering sisi server dan pembuatan situs statis. Hari ini kami akan menjelaskan bagaimana Anda dapat menerapkan aplikasi Next.js Anda dengan Laravel Forge.</p><p>Jika Anda mengikuti server Forge Anda sendiri, pastikan server tersebut adalah server &quot;Aplikasi&quot; atau &quot;Web&quot; sehingga Nginx diinstal.</p><p>Dalam postingan ini, kami akan menjelaskan cara men-deploy situs Anda menggunakan fitur rendering sisi server Next.js.</p><h2>Membuat Template Nginx</h2><p>Untuk menggunakan rendering sisi server, pertama-tama kita perlu membuat&nbsp;<a href=\"https://forge.laravel.com/docs/1.0/servers/nginx-templates.html\">Template Nginx</a> baru&nbsp;di Forge.&nbsp;Kami menggunakan Template Nginx di sini sehingga kami tidak perlu mengubah konfigurasi Nginx situs kami nanti.</p><p>Kami akan membuat template baru dengan nama &quot;Next.js App&quot; dan kemudian memperbarui konten template kami:</p><pre><code># FORGE CONFIG (DO NOT REMOVE!)\ninclude forge-conf/{{ SITE }}/before/*;\n\nserver {\n    listen {{ PORT }};\n    listen {{ PORT_V6 }};\n    server_name {{ DOMAINS }};\n    server_tokens off;\n    root {{ PATH }};\n\n    # FORGE SSL (DO NOT REMOVE!)\n    # ssl_certificate;\n    # ssl_certificate_key;\n\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n\n    index index.html index.htm;\n\n    charset utf-8;\n\n    # FORGE CONFIG (DO NOT REMOVE!)\n    include forge-conf/{{ SITE }}/server/*;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/{{ SITE }}-error.log error;\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n\n# FORGE CONFIG (DO NOT REMOVE!)\ninclude forge-conf/{{ SITE }}/after/*;\n</code></pre><p>Anda mungkin memperhatikan bahwa&nbsp;<code>location /</code>blok tersebut menggunakan&nbsp;<code>proxy_pass</code>.&nbsp;Render sisi server di Berikutnya bekerja mirip dengan PHP, server membuat proses tetap berjalan yang menghasilkan konten dan menyajikannya ke klien.&nbsp;Dengan Next.js, kami menggunakan Node, jadi kami akan meneruskan permintaan kami ke server Next.js melalui port&nbsp;<code>3000</code>.&nbsp;Anda dapat mengubah ini berdasarkan persyaratan proyek Anda.</p><h2>Membuat Situs</h2><p>Dengan Template Nginx yang dibuat, sekarang kita dapat membuat situs kita, memastikan bahwa kita memilih opsi Template Nginx &quot;Next.js App&quot;:</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/tifX6Qp2JU3dW6f5AYzYqUHemwNYwaAEPG894Pya.png\" alt=\"Membuat situs baru\" class=\"fr-fic fr-dii\"></p><p>Setelah Forge membuat situs, kami dapat menginstal repositori kami dari penyedia Git pilihan kami.</p><h2>Skrip Penerapan</h2><p>Langkah selanjutnya adalah memperbarui skrip penerapan situs:</p><pre><code>cd /home/forge/next-app-static.curved-feather.test\ngit pull origin $FORGE_SITE_BRANCH\n\nnpm install\n</code></pre><p>Kami sekarang dapat menyebarkan situs kami dengan skrip yang diperbarui untuk menginstal dependensi NPM kami.</p><p>Jika kita menjelajah ke situs kita sekarang, Nginx akan memberi kita kesalahan 502.&nbsp;Ini karena kita belum memulai server Next.js.&nbsp;Untuk melakukannya, kita akan membuat Daemon baru di server.&nbsp;Untuk daemon, kita hanya perlu menyediakan direktori situs kita dan perintah;&nbsp;<code>npm run generate</code>.</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/ICmgY8IM74BmLj52RKHx0U0BIyCH5DLtr4UldXiW.png\" alt=\"Membuat Daemon\" class=\"fr-fic fr-dii\"></p><p>Setelah Daemon dikonfigurasi dan menjadi aktif, kita dapat mengunjungi situs kita dan melihat bahwa itu sekarang berfungsi.</p>"
      },
      {
        "title": "Memulai melangkah di dunia IT",
        "slug": "memulai-melangkah-di-dunia-it",
        "img": "https://i.ibb.co/c8zQQC0/photo-1481201779555-88fcea2968ca.jpg",
        "category": "Common",
        "created_at": "2021-06-09",
        "body": "<p id=\"isPasted\">Pertanyaan yang banyak ditanyakan ketika kita ingin berlajar di dunia IT. &quot;Harus Kemana ?&quot;. Semoga Tulisan dibawah bisa menjawab pertanyaan teman teman semua :D</p><p>Sebelum memulai, kita harus tau terlebih dahulu apa itu program?</p><p>Program atau Perangkat lunak atau Software adalah sekumpulan perintah untuk menyelesaikan suatu masalah tertentu.</p><p>Terus Apa sih pemrograman ?</p><p>Pemrograman itu adalah Proses pembuat, menambahkan, membangun, dan maintenance software suatu program.</p><p>Kemudian banyak yang bertanya tentang, siapa sih Programmer itu?</p><p>programmer adalah seseorang yg memiliki kemampuan merancang syntax menggunakan bahasa pemrograman.</p><p>Nah setelah tau dasar dasar dari semua itu, kemudian apa saja sih yang harus disiapkan sebelum mulai belajar pemrograman ?</p><p>Niat.</p><p>Tentu Semua gak akan jalan jika kita engga ada niat untuk mulai melangkah. Tapi ya</p><p>tentu saja ketika kamu baca artikel ini, pasti sudah ada niat untuk mulai melangkah di dunia IT ðŸ˜Œ</p><p>Belajar Algoritma &amp; Struktur data.</p><p>Algoritma adalah langkah langkah atau tahapan untuk menyelesaikan suatu masalah secara logis dan terstruktur</p><p>Struktur data adalah bagaimana kita memanajemen sebuah data agar tidak memakan memori dan kinerja prosesor</p><p>Melatih belajar studi kasus.</p><p>Nah ini cara paling efektif untuk belajar. Coba tantang diri kamu belajar dari studi kasus, kamu akan terlatih bagaimana menyelesaikan masalah. Implementasikan Algoritma yang telah kamu pelajari.</p><p>Mau ngebuat apa nanti.</p><p>Nah, ini berkaitan dengan poin sebelumnya, kita harus tau tujuannya mau apa, contohnya mau buat website. Terus websitenya mau tentang apa ? dan mau pake teknologi apa disana.</p><p>laptop/pc sesuai kebutuhan.</p><p>Nah bisa diibaratkan Laptop atau PC itu kaya Pisau untuk seorang Chef, Chef tanpa pisau engga akan bisa menciptakan suatu produk. Begitu pula dengan IT. Kita mungkin masih bisa corat coret pakai kertas dan pulpen ketika ingin ngebuat Algoritma suatu program. Tapi tentunya tools yang kita gunakan engga cuma itu saja. Sebagai Programmer khususnya, setidaknya kita harus punya Laptop/PC.</p><p>Terus gimana jika kita yang engga punya laptop/pc ? Ini mungkin menjadi dilema kita sendiri. Namun perlu diingat, terkadang untuk meraih sesuatu harus mengorbankan sesuatu juga. Pertukaran setara. Ketika kita ingin berkembang lebih baik, kita harus mengeluarkan sedikit material.</p><p>Text Editor/IDE.</p><p>Ini yang menjadi alat &#39;perang&#39; kita setelah mempunyai laptop. Setiap chef tentu punya dapurnya masing masing, nah Programmer juga punya dapurnya! Namanya Text Editor dan IDE.</p><p>Apa itu Text Editor?</p><p>tools/ alat yang digunakan untuk mengolah code / source code kita, ukurannya terbilang kecil dan comfortable dengan banyak bahasa pemrograman.</p><p>Apa itu IDE?</p><p>Sama halnya dengan text Editor, namun memiliki Efisiensi dan fitur yang lebih banyak, dan biasanya digunakan untuk bahasa pemrograman tertentu dan ukurannya terbilang cukup besar dan berat</p><p>Memilih Dunia Pemrogramman.</p><p>Setelah semua alatnya sudah siap, Kita harus menentukan dunia pemrograman apa yang akan di perdalam untuk menyelesaikan masalah/studikasus kita. Pertanyaanya adalah Mau kemana ?</p><p>Ada banyak Dunia IT itu. mungkin saya hanya akan menyebutkan beberapa saja.</p><ul><li>Ada Dunia Web =&gt; Dunia dimana kamu akan berinteraksi banyak hal dengan internet dan website.</li><li>Ada Dunia Desktop =&gt; Dunia dimana kamu akan membuat aplikasi aplikasi GUI di desktop.</li><li>Ada Dunia Mobile =&gt; Dunia Smartphone! Kamu akan ngebuat aplikasi Mobile.</li><li>Ada Dunia AI =&gt; Dunia Kecerdasan Buatan/Artificial Intelligence. Dunia dimana kamu akan buat robot pintar! Machine Learning! dan banyak lagi.</li></ul><p>4 Dunia ini yang sekarang lagi rame dibicarakan. Dan tentunya semakin rame dibicarakan, maka persaingannya makin rame juga.</p><p>Mental Programmer.</p><p>Terakhir dan paling fatal menurut saya. Mental. Sebagai programmer kita harus terlatih untuk sabar menghadapi &#39;cobaan&#39;. Bagaimana menghadapi bug, bagaimana menghadapi persaingan antar programmer, bagaimana menghadapi dunia kerja nanti, atau bahkan bagaimana menghadapi client yang rewel.</p><p>Mental harus siap setiap saat. Kita harus kuat ditempa banyak masalah. Logika Algoritma kita akan di asah disini. Menyelesaikan semuanya secara efisien dan diusahakan tidak menimbulkan masalah lain.</p><p>Kesimpulan</p><p>Sebelum melangkah, kita harus tau step by step untuk memulai sesuatu. Sangat panjang sekali memang. Namun kita harus melalui semua itu. Tetap menjadi Programmer yang semangat belajar, Mental yang kuat dan Berfikir se efisien mungkin.</p>"
      },
      {
        "title": "Vapor: Redis 6.x Cluster Sekarang Tersedia",
        "slug": "vapor-redis-6x-cluster-sekarang-tersedia",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/pBgZmYBs1XRDVDMptC2A2MUK9eXGSlvljrso5gTv.png",
        "category": "Vapor",
        "created_at": "2021-05-04",
        "body": "<p id=\"isPasted\">Vapor memungkinkan Anda dengan mudah membuat dan mengelola Redis Cache Cluster yang dapat diskalakan langsung dari UI Vapor atau menggunakan CLI Vapor.&nbsp;Mulai hari ini, selain Redis 5.x Cluster,&nbsp;<strong>kini Anda juga dapat membuat dan mengelola Redis 6.x Cluster</strong> .</p><p>Redis 6.x adalah versi terbaru dari&nbsp;perangkat lunak&nbsp;sumber terbuka&nbsp;<a href=\"https://redis.io/\">Redis</a> .&nbsp;Versi baru ini menghadirkan peningkatan keamanan dan meningkatkan kinerja cache Anda.</p><p>Anda dapat mulai menggunakan Redis 6.x Clusters dengan membuat cache baru di Vapor UI atau menggunakan&nbsp;<code>cache</code>perintah CLI.&nbsp;Kedua cara akan meminta Anda untuk detail lebih lanjut tentang cache seperti versi Redis:</p><p><img src=\"https://laravel-blog-assets.s3.amazonaws.com/pBgZmYBs1XRDVDMptC2A2MUK9eXGSlvljrso5gTv.png\" alt=\"gambar\" class=\"fr-fic fr-dii\"></p><p>Silakan lihat&nbsp;<a href=\"https://aws.amazon.com/blogs/aws/new-redis-6-compatibility-for-amazon-elasticache/\">pengumuman blog AWS</a> untuk informasi lebih lanjut tentang fitur baru ini.</p><p>Kami harap Anda menikmati tambahan baru untuk Laravel Vapor ini.&nbsp;Di Laravel, kami berkomitmen untuk memberi Anda pengalaman PHP yang paling kuat dan ramah pengembang di dunia.&nbsp;Jika Anda belum memeriksa Vapor, sekarang adalah waktu yang tepat untuk memulai!&nbsp;Anda dapat membuat akun hari ini di:&nbsp;<strong><a href=\"https://vapor.laravel.com/\">vapor.laravel.com</a></strong> .</p>"
      },
      {
        "title": "Forge: Octane Support",
        "slug": "forge-octane-support",
        "img": "https://laravel-blog-assets.s3.amazonaws.com/387iQVEFLGWQ8GGBk30sCKZpVY4IyVZiYTZhISkU.jpeg",
        "category": "Forge",
        "created_at": "2021-04-21",
        "body": "<p>Kembali pada bulan Maret, Taylor mengumumkan proyek <a href=\"https://github.com/laravel/octane\">Laravel Octane</a> baru di Laracon Online.&nbsp;Sejak itu, kami sibuk mengerjakan perbaikan bug dan peningkatan pada Octane, serta menambahkan dukungan ke&nbsp;<a href=\"https://forge.laravel.com/\">Laravel Forge</a> .</p><p><img alt=\"\" src=\"https://laravel-blog-assets.s3.amazonaws.com/NmYMPJw14ZDIXLIqJeE9LUifABZ89AEMP5brhMwb.png\" class=\"fr-fic fr-dii\"></p><p>Hari ini kami dengan senang hati mengumumkan bahwa dukungan Octane tersedia di Forge.&nbsp;Kami telah menulis panduan di bawah ini untuk membantu Anda memulai.&nbsp;Harap diingat bahwa Octane masih dalam versi beta dan tidak boleh digunakan dalam produksi.</p><h2>Prasyarat</h2><p>Proyek Anda harus membutuhkan&nbsp;<code>&quot;laravel/octane&quot;: &quot;^0.3.2&quot;</code>atau lebih tinggi.&nbsp;Server Anda&nbsp;<strong>harus</strong> menginstal PHP 8.0.</p><p>Anda kemudian harus mengikuti instruksi instalasi Octane yang terdaftar di&nbsp;<a href=\"https://github.com/laravel/octane#installation\">repositori Octane</a> .</p><h2>Membuat Situs Oktan</h2><p>Octane dapat diaktifkan dengan memilih&nbsp;opsi jenis proyek&nbsp;<strong>Laravel Octane (Beta)</strong> dan PHP 8.0 sebagai versi PHP yang harus digunakan untuk melayani situs Anda:</p><p><img alt=\"Jenis Proyek Laravel Octane\" src=\"https://laravel-blog-assets.s3.amazonaws.com/b2Qk8heidCP5AzCNlaFIdf7JDJBtcxRP80kEiOSY.png\" class=\"fr-fic fr-dii\"></p><p>Jenis Proyek Laravel Octane</p><p>Setelah jenis proyek dipilih, Forge akan meminta port yang harus didengarkan oleh Octane.</p><p>Tidak seperti jenis proyek lainnya, Octane tidak akan menggunakan PHP-FPM untuk melayani situs Anda.&nbsp;Sebagai gantinya, Octane memulai server RoadRunner atau Swoole-nya sendiri (pilihan Anda) dan menggunakan Nginx sebagai proxy terbalik ke port yang Anda pilih.&nbsp;Sebaiknya pilih nomor port yang tinggi&nbsp;<code>8000</code>untuk mencegah bentrokan dengan perangkat lunak lain yang mungkin berjalan di server Anda.</p><p>Saat membuat situs Anda, Forge akan menginstal ekstensi Swoole jika belum diinstal di server Anda.&nbsp;Semua server baru yang disediakan dengan PHP 8.0 akan secara otomatis menerima ekstensi ini.</p><h2>Mengonfigurasi Daemon Oktan</h2><p>Setelah situs bertenaga Octane Anda dibuat di Forge, Anda akan melihat dua perbedaan penting dibandingkan dengan proyek FPM standar:</p><ol><li>Deploy Script tidak memuat ulang PHP-FPM, melainkan akan memeriksa status server Octane dan mengeluarkan perintah reload ke server Octane.</li><li>Ada&nbsp;panel&nbsp;<strong>Laravel Octane (Beta) baru</strong> yang menampilkan informasi yang Anda perlukan untuk mengonfigurasi daemon dengan benar.</li></ol><p><img alt=\"Forge akan menampilkan informasi yang diperlukan untuk membuat Daemon baru Anda.\" src=\"https://laravel-blog-assets.s3.amazonaws.com/55yqMNcF4ll3xMi099KwXSaW0hnJPqhibwCKM9Gu.png\" class=\"fr-fic fr-dii\"></p><p>Forge akan menampilkan informasi yang diperlukan untuk membuat Daemon baru Anda.</p><p>Anda harus menggunakan informasi ini untuk membuat Daemon yang akan mengelola server Octane Anda.&nbsp;Karena server Octane adalah proses yang berjalan lama, Daemon akan memantau proses dan secara otomatis memulai ulang Octane jika crash:</p><p><img alt=\"Membuat Daemon baru untuk menjalankan Octane.\" src=\"https://laravel-blog-assets.s3.amazonaws.com/pORInQL0ykdW0vc2A9U2tjYUruZjbkkq94zLAzjX.png\" class=\"fr-fic fr-dii\"></p><p>Membuat Daemon baru untuk menjalankan Octane.</p><p>Mari kita cepat memecah perintah yang telah dibuat Forge untuk kita:</p><pre>php8.0 artisan oktan: mulai  --port=8000 --tidak ada interaksi</pre><ul><li>Kami memastikan bahwa&nbsp;<code>octane:start</code>berjalan dengan biner PHP 8.0.</li><li>Kami memberi tahu Octane untuk mendengarkan di port&nbsp;<code>8000</code>.</li><li>Kami menjalankan perintah dengan&nbsp;<code>--no-interaction</code>opsi sehingga Octane akan menginstal dependensi apa pun untuk kami seperti&nbsp;<code>rr</code>(biner RoadRunner) jika perlu.</li></ul><p>Setelah Daemon Anda dibuat, situs Octane Anda sekarang seharusnya dapat diakses melalui browser web Anda!</p><p>Jika Anda tidak memiliki &nbsp; akun&nbsp;<a href=\"https://forge.laravel.com/\">Forge</a> , sekarang adalah saat yang tepat untuk mendaftar! Forge memungkinkan Anda membuat dan mengelola server PHP dengan mudah yang mencakup MySQL, Redis, Memcached, cadangan basis data, dan semua yang Anda perlukan untuk menjalankan aplikasi Laravel modern yang tangguh.</p>"
      },
      {
        "title": "Hugo, framework untuk membuat website statis",
        "slug": "hugo-framework-untuk-membuat-website-statis",
        "img": "https://i.ibb.co/wKhdpK5/Screen-Shot-2020-08-15-at-8-58-53-AM.png",
        "category": "SSG",
        "created_at": "2021-04-15",
        "body": "<p>Ada banyak perlombaan di dunia &quot;static site generator&quot;, salah satu yang sangat populer adalah <a href=\"https://gohugo.io/\">hugo</a>, dengan &quot;jualan&quot; utama di landing pagenya &quot;the world&#39;s fastest framework for building websites&quot; atau diterjemahkan &quot;framework tercepat di dunia untuk membuat website&quot;. Normalnya saya akan bilang, setiap framework pasti punya klaimnya masing-masing, tapi setelah saya menggunakannya, ternyata hugo berhasil membuktikan janjinya! sangat cepat!</p><p>Kita berkenalan dulu sedikit tentang hugo dan fitur apa saja yang dia punya, sebelum kita lompat ke cara membuat websitenya.</p><h2>Apa itu Hugo</h2><p>Hugo adalah proyek open source yang dimulai oleh Bj&oslash;rn Erik Pedersen yang saat ini sudah disponsori oleh banyak perusahaan. Tidak mudah tentunya untuk sebuah proyek open source bisa sampai ke tahap tersebut. Ini menjadi salah satu bukti, kalau banyak orang yang sudah terbantu dengan Hugo.</p><p>Dibuat dengan <a href=\"https://sekolahkoding.com/belajar/go-lang\">bahasa Go Lang</a> , bahasa modern yang terkenal dengan kecepatannya, hugo akan membantu kamu membuat website statis tanpa perlu menunggu lama dalam waktu <em>build</em>-nya.</p><h2>Apa yang bisa dibuat dengan Hugo</h2><p>Seperti membuat blog pada platform besar seperti wordpress, kamu bisa melakukan banyak hal di sini. Seperti sistem kategori, menu dinamis, mengurus SEO dan masih banyak lagi. Karena itu membuat website dengan Hugo akan terasa sangat fleksibel seperti membuat website dengan bahasa dinamis lainnya.</p><p>Seperti <a href=\"https://sekolahkoding.com/artikel/apa-itu-static-site-generator\">SSG(static site generator)</a> pada umumnya, pengguna bisa menggunakan markdown saat ingin menulis kontennya, sayangya markdown dikenal memiliki beberapa keterbatasan, seperti tidak bisa memasukkan iframe. Hugo mengatasi ini dengan fitur &quot;shortcodes&quot; nya, di mana ada beberapa kode yang sudah disediakan dan bisa kita buat sendiri untuk dimasukkan ke markdownnya. Seperti menampilkan iframe, tag figure pada HTML, embed konten sosial media, dan lainnya.</p><p>Kamu juga bisa mengambil konten dari file JSON dengan Hugo jika kamu membutuhkannya.</p><h2>Bagaimana cara install Hugo</h2><p>Hugo bisa digunakan di semua OS pada umumnya seperti: macOS, Windows, Linux, OpenBSD, FreeBSD.</p><p><strong>MacOS dan Linux</strong></p><p>bisa menggunakan package manager <a href=\"https://brew.sh/\">homebrew</a></p><pre>brew install hugo</pre><p><strong>Windows</strong></p><p>menggunakan package manager <a href=\"https://chocolatey.org/\">chocolatey</a></p><pre>choco install hugo -confirm</pre><p>atau menggunakan <a href=\"https://scoop.sh/\">scoop</a></p><pre>scoop install hugo</pre><p>Jika sudah menginstall, kamu bisa konfirmasi berhasil dengan mengetik <code>hugo version .</code></p><p>Jika sudah ada output yang terlihat, berarti instalannya berhasil.</p><p>Ini informasi lengkap <a href=\"https://gohugo.io/getting-started/installing/\">cara install hugo</a></p><h2>Membuat website dengan Hugo</h2><p>Langsung saja cara membuat website baru dengan hugo</p><pre>hugo new site namaProyekMu</pre><p>Perintah di atas akan membuat proyek/folder baru sesuai nama yang kamu masukkan. Silahkan buka text editor untuk melihat instalan dari Hugo.</p><h2>Membuat halaman baru di Hugo</h2><p>Untuk membuat halaman baru di websitemu</p><pre>hugo new posts/post-pertama.md</pre><p>Ini isi dari file tersebut. Kamu bisa mulai menulis postingan di bawah baris yang sudah ada.</p><pre>---\ntitle: &quot;Post Pertama&quot;\ndate: 2020-08-15T09:44:10+08:00\ndraft: true\n---\n\nIni tambahan dari kamu.\nIni halaman pertama.</pre><p>Kamu berhasil membuat satu halaman baru yang lokasinya ada di dalam folder content/posts.</p><p>Baris --- adalah informasi dari file tersebut, yang bisa berisi banyak hal. Pada kasus ini adalah judul dari kontennya, tanggal dibuat dan apakah dia draft atau bukan. Draft berarti kontennya hanya bisa terlihat oleh kamu (pembuatnya).</p><p>Kamu bisa mempublishnya dengan mengganti nilai draft menjadi false.</p><pre>---\ntitle: &quot;Post Pertama&quot;\ndate: 2020-08-15T09:44:10+08:00\ndraft: false\n---</pre><h2>Memberikan Tema Hugo</h2><p>Saat ini website kamu belum punya tema atau template dasar yang bisa kamu lihat. Untuk itu kamu membutuhkan <a href=\"https://git-scm.com/\">git</a> jika belum menginstallnya.</p><pre>git init\ngit submodule add <a href=\"https://github.com/budparr/gohugo-theme-ananke.git\">https://github.com/budparr/gohugo-theme-ananke.git</a> themes/ananke</pre><p>Penjelasan perintah:</p><p><em>git init</em></p><p>Di sini kita menginsialisasi repo baru. Agar bisa mengampil tema berdasarkan link git nya</p><p><em>git submodule add ..</em></p><p>Kita mengimport tema baru bernama &quot;ananke&quot;. Ada banyak pilihan tema Hugo yang bisa kamu ambil di <a href=\"https://themes.gohugo.io/\">themes Hugo</a> . Kamu tinggal memilih salah satunya dan mengganti link repo github di atas berdasarkan info tema masing-masing.</p><p>Di bawah folder &quot;themes&quot; kamu sekarang, sudah banyak informasi mengenal tema tersebut.</p><p>Beritahu website kamu untuk menggunakan tema ini dengan menambahkan</p><p><code>theme = &quot;ananke&quot;&nbsp;</code>di file config.toml kamu</p><p>atau cukup jalankan</p><pre>echo &#39;theme = &quot;ananke&quot;&#39; &gt;&gt; config.toml</pre><h2>Menjalankan server Hugo</h2><p>Sekarang kita jalankan website kamu.</p><pre>hugo server</pre><p>Website kamu sudah jadi! silahkan intip di <a href=\"http://localhost:1313/\">http://localhost:1313/</a> atau baca output dari command tersebut tentang informasi lokasi localhost kamu</p><p><img src=\"https://i.ibb.co/qx8bTVC/Screen-Shot-2020-08-15-at-10-26-14-AM.png\" alt=\"Screen-Shot-2020-08-15-at-10-26-14-AM.png\" class=\"fr-fic fr-dii\"><em>Screen Shot 2020-08-15 at 10.26.14 AM.png</em></p><p><br></p><p>Tulisa &quot;my new hugo site&quot; tersebut adalah judul standar yang ada di file config.toml yang bisa kamu ganti sendiri di config.toml bagian <code>title=&quot;judul website kamu&quot;</code></p><p>Kalau kamu mau menampilkan konten yang masih dalam bentuk draft cukup menambahkan -D</p><pre>hugo server -D</pre><h2>Bagaimana cara mengganti tema Hugo</h2><p>Kamu bosan atau menyesal dengan pilihan tema hugo kamu? Tenang dia ngga YOLO ko, alias cuma bisa satu kali. Kamu bisa kembali ke daftar tema <a href=\"https://themes.gohugo.io/\">themes Hugo</a> dan melakukan hal yang sama seperti sebelumnya.</p><p>Cukup copy paste command git submodule salah satu temanya untuk menginstall.</p><p>Kalau sudah berhasil di folder <code>themes</code> kamu sekarang sudah ada lebih dari satu tema.</p><p>Untuk menggantinya sendiri tinggal ke file konfigurasi config.toml dan mengganti nilai <code>theme = &quot;nama tema pilihan kamu&quot;</code></p><p>Kita akan bermain lagi dengan Hugo di artikel lainnya!</p><p><em>Meta: bagaimana cara install Hugo SSG, apa itu Hugo, cara membuat blog dengan Hugo, cara membuat webiste statis dengan Hugo</em></p>"
      }
    ]
  }
}
